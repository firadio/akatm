// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"

	account "akatm/api/managerGateway/internal/handler/account"
	customer "akatm/api/managerGateway/internal/handler/customer"
	invite "akatm/api/managerGateway/internal/handler/invite"
	managerAuth "akatm/api/managerGateway/internal/handler/managerAuth"
	managerProfile "akatm/api/managerGateway/internal/handler/managerProfile"
	report "akatm/api/managerGateway/internal/handler/report"
	transaction "akatm/api/managerGateway/internal/handler/transaction"
	user "akatm/api/managerGateway/internal/handler/user"
	wallet "akatm/api/managerGateway/internal/handler/wallet"
	withdrawal "akatm/api/managerGateway/internal/handler/withdrawal"
	"akatm/api/managerGateway/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 创建开户申请
					Method:  http.MethodPost,
					Path:    "/account-applications",
					Handler: account.CreateAccountApplicationHandler(serverCtx),
				},
				{
					// 开户申请列表
					Method:  http.MethodGet,
					Path:    "/account-applications",
					Handler: account.ListAccountApplicationsHandler(serverCtx),
				},
				{
					// 开户申请详情
					Method:  http.MethodGet,
					Path:    "/account-applications/:id",
					Handler: account.GetAccountApplicationHandler(serverCtx),
				},
				{
					// 账户列表
					Method:  http.MethodGet,
					Path:    "/accounts",
					Handler: account.ListAccountsHandler(serverCtx),
				},
				{
					// 账户详情
					Method:  http.MethodGet,
					Path:    "/accounts/:id",
					Handler: account.GetAccountHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 新增银行客户
					Method:  http.MethodPost,
					Path:    "/customers",
					Handler: customer.CreateCustomerHandler(serverCtx),
				},
				{
					// 客户列表
					Method:  http.MethodGet,
					Path:    "/customers",
					Handler: customer.ListCustomersHandler(serverCtx),
				},
				{
					// 客户详情
					Method:  http.MethodGet,
					Path:    "/customers/:id",
					Handler: customer.GetCustomerHandler(serverCtx),
				},
				{
					// 更新客户
					Method:  http.MethodPut,
					Path:    "/customers/:id",
					Handler: customer.UpdateCustomerHandler(serverCtx),
				},
				{
					// 删除客户
					Method:  http.MethodDelete,
					Path:    "/customers/:id",
					Handler: customer.DeleteCustomerHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 生成邀请链接
					Method:  http.MethodPost,
					Path:    "/invites",
					Handler: invite.CreateInviteHandler(serverCtx),
				},
				{
					// 邀请链接列表
					Method:  http.MethodGet,
					Path:    "/invites",
					Handler: invite.ListInvitesHandler(serverCtx),
				},
				{
					// 邀请详情
					Method:  http.MethodGet,
					Path:    "/invites/:id",
					Handler: invite.GetInviteHandler(serverCtx),
				},
				{
					// 修改邀请链接
					Method:  http.MethodPut,
					Path:    "/invites/:id",
					Handler: invite.UpdateInviteHandler(serverCtx),
				},
				{
					// 撤销邀请
					Method:  http.MethodPatch,
					Path:    "/invites/:id/revoke",
					Handler: invite.RevokeInviteHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck},
			[]rest.Route{
				{
					// 获取图片验证码
					Method:  http.MethodGet,
					Path:    "/captcha",
					Handler: managerAuth.GetCaptchaHandler(serverCtx),
				},
				{
					// 登录
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: managerAuth.LoginHandler(serverCtx),
				},
				{
					// 邀请注册
					Method:  http.MethodPost,
					Path:    "/register",
					Handler: managerAuth.RegisterHandler(serverCtx),
				},
				{
					// 发送邮箱验证码
					Method:  http.MethodPost,
					Path:    "/send-code",
					Handler: managerAuth.SendCodeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/manager/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 当前用户信息
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: managerAuth.InfoHandler(serverCtx),
				},
				{
					// 登出
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: managerAuth.LogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 获取个人资料
					Method:  http.MethodGet,
					Path:    "/",
					Handler: managerProfile.GetProfileHandler(serverCtx),
				},
				{
					// 更新个人资料
					Method:  http.MethodPut,
					Path:    "/",
					Handler: managerProfile.UpdateProfileHandler(serverCtx),
				},
				{
					// 获取费率设置
					Method:  http.MethodGet,
					Path:    "/fee-settings",
					Handler: managerProfile.GetFeeSettingsHandler(serverCtx),
				},
				{
					// 更新费率设置
					Method:  http.MethodPut,
					Path:    "/fee-settings",
					Handler: managerProfile.UpdateFeeSettingsHandler(serverCtx),
				},
				{
					// 修改登录密码
					Method:  http.MethodPatch,
					Path:    "/password",
					Handler: managerProfile.ChangePasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager/profile"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 客户报表
					Method:  http.MethodGet,
					Path:    "/reports/customers",
					Handler: report.GetCustomersReportHandler(serverCtx),
				},
				{
					// 我的报表
					Method:  http.MethodGet,
					Path:    "/reports/my",
					Handler: report.GetMyReportHandler(serverCtx),
				},
				{
					// 下级用户报表
					Method:  http.MethodGet,
					Path:    "/reports/users/:userId",
					Handler: report.GetSubUserReportHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 流水列表
					Method:  http.MethodGet,
					Path:    "/transactions",
					Handler: transaction.ListTransactionsHandler(serverCtx),
				},
				{
					// 流水详情
					Method:  http.MethodGet,
					Path:    "/transactions/:id",
					Handler: transaction.GetTransactionHandler(serverCtx),
				},
				{
					// 资金总览
					Method:  http.MethodGet,
					Path:    "/transactions/summary",
					Handler: transaction.GetSummaryHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 用户列表
					Method:  http.MethodGet,
					Path:    "/users",
					Handler: user.ListUsersHandler(serverCtx),
				},
				{
					// 用户详情
					Method:  http.MethodGet,
					Path:    "/users/:id",
					Handler: user.GetUserHandler(serverCtx),
				},
				{
					// 用户国家授权
					Method:  http.MethodPatch,
					Path:    "/users/:id/countries",
					Handler: user.UpdateUserCountryAuthHandler(serverCtx),
				},
				{
					// 更新用户手续费
					Method:  http.MethodPatch,
					Path:    "/users/:id/fees",
					Handler: user.UpdateUserFeesHandler(serverCtx),
				},
				{
					// 下级用户列表
					Method:  http.MethodGet,
					Path:    "/users/:id/sub-users",
					Handler: user.GetSubUsersHandler(serverCtx),
				},
				{
					// 创建代理
					Method:  http.MethodPost,
					Path:    "/users/agents",
					Handler: user.CreateAgentHandler(serverCtx),
				},
				{
					// 创建客户经理
					Method:  http.MethodPost,
					Path:    "/users/managers",
					Handler: user.CreateManagerHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 钱包列表
					Method:  http.MethodGet,
					Path:    "/wallets",
					Handler: wallet.ListWalletsHandler(serverCtx),
				},
				{
					// 钱包详情
					Method:  http.MethodGet,
					Path:    "/wallets/:id",
					Handler: wallet.GetWalletHandler(serverCtx),
				},
				{
					// 绑定提现地址
					Method:  http.MethodPost,
					Path:    "/wallets/:id/addresses",
					Handler: wallet.AddAddressHandler(serverCtx),
				},
				{
					// 提现地址列表
					Method:  http.MethodGet,
					Path:    "/wallets/:id/addresses",
					Handler: wallet.ListAddressesHandler(serverCtx),
				},
				{
					// 删除提现地址
					Method:  http.MethodDelete,
					Path:    "/wallets/:id/addresses/:addressId",
					Handler: wallet.DeleteAddressHandler(serverCtx),
				},
				{
					// 钱包余额
					Method:  http.MethodGet,
					Path:    "/wallets/:id/balance",
					Handler: wallet.GetBalanceHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 申请提现
					Method:  http.MethodPost,
					Path:    "/withdrawals",
					Handler: withdrawal.CreateWithdrawalHandler(serverCtx),
				},
				{
					// 提现列表
					Method:  http.MethodGet,
					Path:    "/withdrawals",
					Handler: withdrawal.ListWithdrawalsHandler(serverCtx),
				},
				{
					// 提现详情
					Method:  http.MethodGet,
					Path:    "/withdrawals/:id",
					Handler: withdrawal.GetWithdrawalHandler(serverCtx),
				},
				{
					// 取消提现
					Method:  http.MethodPost,
					Path:    "/withdrawals/:id/cancel",
					Handler: withdrawal.CancelWithdrawalHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/manager"),
	)
}
