// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"

	account "akatm/api/adminGateway/internal/handler/account"
	adminAuth "akatm/api/adminGateway/internal/handler/adminAuth"
	audit "akatm/api/adminGateway/internal/handler/audit"
	auditAccountApplication "akatm/api/adminGateway/internal/handler/auditAccountApplication"
	auditDeposit "akatm/api/adminGateway/internal/handler/auditDeposit"
	auditWithdrawal "akatm/api/adminGateway/internal/handler/auditWithdrawal"
	country "akatm/api/adminGateway/internal/handler/country"
	customer "akatm/api/adminGateway/internal/handler/customer"
	dashboard "akatm/api/adminGateway/internal/handler/dashboard"
	fund "akatm/api/adminGateway/internal/handler/fund"
	invite "akatm/api/adminGateway/internal/handler/invite"
	menu "akatm/api/adminGateway/internal/handler/menu"
	report "akatm/api/adminGateway/internal/handler/report"
	role "akatm/api/adminGateway/internal/handler/role"
	staff "akatm/api/adminGateway/internal/handler/staff"
	system "akatm/api/adminGateway/internal/handler/system"
	user "akatm/api/adminGateway/internal/handler/user"
	"akatm/api/adminGateway/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 账户列表
					Method:  http.MethodGet,
					Path:    "/accounts",
					Handler: account.ListAccountsHandler(serverCtx),
				},
				{
					// 创建账户
					Method:  http.MethodPost,
					Path:    "/accounts",
					Handler: account.CreateAccountHandler(serverCtx),
				},
				{
					// 账户详情
					Method:  http.MethodGet,
					Path:    "/accounts/:id",
					Handler: account.GetAccountHandler(serverCtx),
				},
				{
					// 更新账户信息
					Method:  http.MethodPut,
					Path:    "/accounts/:id",
					Handler: account.UpdateAccountHandler(serverCtx),
				},
				{
					// 删除账户
					Method:  http.MethodDelete,
					Path:    "/accounts/:id",
					Handler: account.DeleteAccountHandler(serverCtx),
				},
				{
					// 账户余额
					Method:  http.MethodGet,
					Path:    "/accounts/:id/balance",
					Handler: account.GetAccountBalanceHandler(serverCtx),
				},
				{
					// 更新账户状态
					Method:  http.MethodPatch,
					Path:    "/accounts/:id/status",
					Handler: account.UpdateAccountStatusHandler(serverCtx),
				},
				{
					// 账户流水
					Method:  http.MethodGet,
					Path:    "/accounts/:id/transactions",
					Handler: account.ListAccountTransactionsHandler(serverCtx),
				},
				{
					// 账户统计
					Method:  http.MethodGet,
					Path:    "/accounts/stats",
					Handler: account.GetAccountStatsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck},
			[]rest.Route{
				{
					// 获取图片验证码
					Method:  http.MethodGet,
					Path:    "/captcha",
					Handler: adminAuth.GetCaptchaHandler(serverCtx),
				},
				{
					// 管理员登录
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: adminAuth.LoginHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/admin/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 获取当前管理员信息
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: adminAuth.GetInfoHandler(serverCtx),
				},
				{
					// 管理员登出
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: adminAuth.LogoutHandler(serverCtx),
				},
				{
					// 修改密码
					Method:  http.MethodPatch,
					Path:    "/password",
					Handler: adminAuth.ChangePasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin/auth"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 审计日志列表
					Method:  http.MethodGet,
					Path:    "/audit/audit-logs",
					Handler: audit.ListAuditLogsHandler(serverCtx),
				},
				{
					// 审计日志详情
					Method:  http.MethodGet,
					Path:    "/audit/audit-logs/:id",
					Handler: audit.GetAuditLogHandler(serverCtx),
				},
				{
					// 清理日志
					Method:  http.MethodPost,
					Path:    "/audit/clean",
					Handler: audit.CleanLogsHandler(serverCtx),
				},
				{
					// 导出日志
					Method:  http.MethodPost,
					Path:    "/audit/export",
					Handler: audit.ExportLogsHandler(serverCtx),
				},
				{
					// 下载导出文件
					Method:  http.MethodGet,
					Path:    "/audit/export/:taskId/download",
					Handler: audit.DownloadExportHandler(serverCtx),
				},
				{
					// 获取导出任务状态
					Method:  http.MethodGet,
					Path:    "/audit/export/:taskId/status",
					Handler: audit.GetExportTaskStatusHandler(serverCtx),
				},
				{
					// 登录日志列表
					Method:  http.MethodGet,
					Path:    "/audit/login-logs",
					Handler: audit.ListLoginLogsHandler(serverCtx),
				},
				{
					// 登录日志详情
					Method:  http.MethodGet,
					Path:    "/audit/login-logs/:id",
					Handler: audit.GetLoginLogHandler(serverCtx),
				},
				{
					// 操作日志列表
					Method:  http.MethodGet,
					Path:    "/audit/operation-logs",
					Handler: audit.ListOperationLogsHandler(serverCtx),
				},
				{
					// 操作日志详情
					Method:  http.MethodGet,
					Path:    "/audit/operation-logs/:id",
					Handler: audit.GetOperationLogHandler(serverCtx),
				},
				{
					// 日志统计
					Method:  http.MethodGet,
					Path:    "/audit/stats",
					Handler: audit.GetLogStatsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 开户申请列表
					Method:  http.MethodGet,
					Path:    "/audits/account-applications",
					Handler: auditAccountApplication.ListAccountApplicationsHandler(serverCtx),
				},
				{
					// 开户申请详情
					Method:  http.MethodGet,
					Path:    "/audits/account-applications/:id",
					Handler: auditAccountApplication.GetAccountApplicationHandler(serverCtx),
				},
				{
					// 审核通过
					Method:  http.MethodPost,
					Path:    "/audits/account-applications/:id/approve",
					Handler: auditAccountApplication.ApproveAccountApplicationHandler(serverCtx),
				},
				{
					// 审核拒绝
					Method:  http.MethodPost,
					Path:    "/audits/account-applications/:id/reject",
					Handler: auditAccountApplication.RejectAccountApplicationHandler(serverCtx),
				},
				{
					// 申请流程跟踪
					Method:  http.MethodGet,
					Path:    "/audits/account-applications/:id/track",
					Handler: auditAccountApplication.TrackAccountApplicationHandler(serverCtx),
				},
				{
					// 批量审核通过
					Method:  http.MethodPost,
					Path:    "/audits/account-applications/batch-approve",
					Handler: auditAccountApplication.BatchApproveAccountApplicationsHandler(serverCtx),
				},
				{
					// 批量审核拒绝
					Method:  http.MethodPost,
					Path:    "/audits/account-applications/batch-reject",
					Handler: auditAccountApplication.BatchRejectAccountApplicationsHandler(serverCtx),
				},
				{
					// 申请统计
					Method:  http.MethodGet,
					Path:    "/audits/account-applications/stats",
					Handler: auditAccountApplication.GetAccountApplicationStatsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 入账审核列表
					Method:  http.MethodGet,
					Path:    "/audits/deposits",
					Handler: auditDeposit.ListDepositsHandler(serverCtx),
				},
				{
					// 入账审核详情
					Method:  http.MethodGet,
					Path:    "/audits/deposits/:id",
					Handler: auditDeposit.GetDepositHandler(serverCtx),
				},
				{
					// 审核通过
					Method:  http.MethodPost,
					Path:    "/audits/deposits/:id/approve",
					Handler: auditDeposit.ApproveDepositHandler(serverCtx),
				},
				{
					// 审核拒绝
					Method:  http.MethodPost,
					Path:    "/audits/deposits/:id/reject",
					Handler: auditDeposit.RejectDepositHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 提现审核列表
					Method:  http.MethodGet,
					Path:    "/audits/withdrawals",
					Handler: auditWithdrawal.ListWithdrawalsHandler(serverCtx),
				},
				{
					// 提现审核详情
					Method:  http.MethodGet,
					Path:    "/audits/withdrawals/:id",
					Handler: auditWithdrawal.GetWithdrawalHandler(serverCtx),
				},
				{
					// 审核通过
					Method:  http.MethodPost,
					Path:    "/audits/withdrawals/:id/approve",
					Handler: auditWithdrawal.ApproveWithdrawalHandler(serverCtx),
				},
				{
					// 审核拒绝
					Method:  http.MethodPost,
					Path:    "/audits/withdrawals/:id/reject",
					Handler: auditWithdrawal.RejectWithdrawalHandler(serverCtx),
				},
				{
					// 批量审核通过
					Method:  http.MethodPost,
					Path:    "/audits/withdrawals/batch-approve",
					Handler: auditWithdrawal.BatchApproveWithdrawalsHandler(serverCtx),
				},
				{
					// 批量审核拒绝
					Method:  http.MethodPost,
					Path:    "/audits/withdrawals/batch-reject",
					Handler: auditWithdrawal.BatchRejectWithdrawalsHandler(serverCtx),
				},
				{
					// 提现统计
					Method:  http.MethodGet,
					Path:    "/audits/withdrawals/stats",
					Handler: auditWithdrawal.GetWithdrawalStatsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 创建国家
					Method:  http.MethodPost,
					Path:    "/countries",
					Handler: country.CreateCountryHandler(serverCtx),
				},
				{
					// 国家列表
					Method:  http.MethodGet,
					Path:    "/countries",
					Handler: country.ListCountriesHandler(serverCtx),
				},
				{
					// 国家详情
					Method:  http.MethodGet,
					Path:    "/countries/:id",
					Handler: country.GetCountryHandler(serverCtx),
				},
				{
					// 更新国家
					Method:  http.MethodPut,
					Path:    "/countries/:id",
					Handler: country.UpdateCountryHandler(serverCtx),
				},
				{
					// 删除国家
					Method:  http.MethodDelete,
					Path:    "/countries/:id",
					Handler: country.DeleteCountryHandler(serverCtx),
				},
				{
					// 更新国家状态
					Method:  http.MethodPut,
					Path:    "/countries/:id/status",
					Handler: country.UpdateCountryStatusHandler(serverCtx),
				},
				{
					// 批量导入国家
					Method:  http.MethodPost,
					Path:    "/countries/batch-import",
					Handler: country.BatchImportCountriesHandler(serverCtx),
				},
				{
					// 获取导入模板
					Method:  http.MethodGet,
					Path:    "/countries/import-template",
					Handler: country.GetImportTemplateHandler(serverCtx),
				},
				{
					// 更新国家排序
					Method:  http.MethodPut,
					Path:    "/countries/sort",
					Handler: country.UpdateCountrySortHandler(serverCtx),
				},
				{
					// 国家使用统计
					Method:  http.MethodGet,
					Path:    "/countries/stats",
					Handler: country.GetCountryStatsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 客户列表
					Method:  http.MethodGet,
					Path:    "/customers",
					Handler: customer.ListCustomersHandler(serverCtx),
				},
				{
					// 客户账户详情
					Method:  http.MethodGet,
					Path:    "/customers/:customerId/accounts/:accountId",
					Handler: customer.GetCustomerAccountHandler(serverCtx),
				},
				{
					// 客户详情
					Method:  http.MethodGet,
					Path:    "/customers/:id",
					Handler: customer.GetCustomerHandler(serverCtx),
				},
				{
					// 更新客户信息
					Method:  http.MethodPut,
					Path:    "/customers/:id",
					Handler: customer.UpdateCustomerHandler(serverCtx),
				},
				{
					// 客户账户列表
					Method:  http.MethodGet,
					Path:    "/customers/:id/accounts",
					Handler: customer.ListCustomerAccountsHandler(serverCtx),
				},
				{
					// KYC审核
					Method:  http.MethodPost,
					Path:    "/customers/:id/kyc-audit",
					Handler: customer.AuditCustomerKycHandler(serverCtx),
				},
				{
					// 更新KYC状态
					Method:  http.MethodPut,
					Path:    "/customers/:id/kyc-status",
					Handler: customer.UpdateCustomerKycStatusHandler(serverCtx),
				},
				{
					// 为客户添加标签
					Method:  http.MethodPost,
					Path:    "/customers/:id/tags",
					Handler: customer.AddCustomerTagsHandler(serverCtx),
				},
				{
					// 移除客户标签
					Method:  http.MethodDelete,
					Path:    "/customers/:id/tags",
					Handler: customer.RemoveCustomerTagsHandler(serverCtx),
				},
				{
					// 获取客户标签
					Method:  http.MethodGet,
					Path:    "/customers/:id/tags",
					Handler: customer.GetCustomerTagsHandler(serverCtx),
				},
				{
					// 客户标签列表
					Method:  http.MethodGet,
					Path:    "/customers/tags",
					Handler: customer.ListCustomerTagsHandler(serverCtx),
				},
				{
					// 创建客户标签
					Method:  http.MethodPost,
					Path:    "/customers/tags",
					Handler: customer.CreateCustomerTagHandler(serverCtx),
				},
				{
					// 更新客户标签
					Method:  http.MethodPut,
					Path:    "/customers/tags/:id",
					Handler: customer.UpdateCustomerTagHandler(serverCtx),
				},
				{
					// 删除客户标签
					Method:  http.MethodDelete,
					Path:    "/customers/tags/:id",
					Handler: customer.DeleteCustomerTagHandler(serverCtx),
				},
				{
					// 搜索可用标签
					Method:  http.MethodGet,
					Path:    "/customers/tags/search",
					Handler: customer.SearchCustomerTagsHandler(serverCtx),
				},
				{
					// 获取标签使用统计
					Method:  http.MethodGet,
					Path:    "/customers/tags/stats",
					Handler: customer.GetCustomerTagStatsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 账户统计
					Method:  http.MethodGet,
					Path:    "/dashboard/account-stats",
					Handler: dashboard.GetAccountStatsHandler(serverCtx),
				},
				{
					// 告警信息
					Method:  http.MethodGet,
					Path:    "/dashboard/alerts",
					Handler: dashboard.GetAlertsHandler(serverCtx),
				},
				{
					// 审核统计
					Method:  http.MethodGet,
					Path:    "/dashboard/audit-stats",
					Handler: dashboard.GetAuditStatsHandler(serverCtx),
				},
				{
					// 客户统计
					Method:  http.MethodGet,
					Path:    "/dashboard/customer-stats",
					Handler: dashboard.GetCustomerStatsHandler(serverCtx),
				},
				{
					// 资金统计
					Method:  http.MethodGet,
					Path:    "/dashboard/fund-stats",
					Handler: dashboard.GetFundStatsHandler(serverCtx),
				},
				{
					// KYC统计
					Method:  http.MethodGet,
					Path:    "/dashboard/kyc-stats",
					Handler: dashboard.GetKycStatsHandler(serverCtx),
				},
				{
					// 仪表盘概览
					Method:  http.MethodGet,
					Path:    "/dashboard/overview",
					Handler: dashboard.GetDashboardOverviewHandler(serverCtx),
				},
				{
					// 实时监控
					Method:  http.MethodGet,
					Path:    "/dashboard/realtime-monitor",
					Handler: dashboard.GetRealtimeMonitorHandler(serverCtx),
				},
				{
					// 交易统计
					Method:  http.MethodGet,
					Path:    "/dashboard/transaction-stats",
					Handler: dashboard.GetTransactionStatsHandler(serverCtx),
				},
				{
					// 趋势图表
					Method:  http.MethodGet,
					Path:    "/dashboard/trend-charts",
					Handler: dashboard.GetTrendChartsHandler(serverCtx),
				},
				{
					// 用户统计
					Method:  http.MethodGet,
					Path:    "/dashboard/user-stats",
					Handler: dashboard.GetUserStatsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 代理资金明细
					Method:  http.MethodGet,
					Path:    "/agents/:agentId/fund-details",
					Handler: fund.GetAgentFundDetailsHandler(serverCtx),
				},
				{
					// 资金明细列表
					Method:  http.MethodGet,
					Path:    "/fund-details",
					Handler: fund.ListFundDetailsHandler(serverCtx),
				},
				{
					// 资金明细详情
					Method:  http.MethodGet,
					Path:    "/fund-details/:id",
					Handler: fund.GetFundDetailHandler(serverCtx),
				},
				{
					// 资金统计总览
					Method:  http.MethodGet,
					Path:    "/fund-summary",
					Handler: fund.GetFundSummaryHandler(serverCtx),
				},
				{
					// 用户资金明细
					Method:  http.MethodGet,
					Path:    "/users/:userId/fund-details",
					Handler: fund.GetUserFundDetailsHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 生成邀请链接
					Method:  http.MethodPost,
					Path:    "/invites",
					Handler: invite.CreateInviteHandler(serverCtx),
				},
				{
					// 邀请链接列表
					Method:  http.MethodGet,
					Path:    "/invites",
					Handler: invite.ListInvitesHandler(serverCtx),
				},
				{
					// 邀请详情
					Method:  http.MethodGet,
					Path:    "/invites/:id",
					Handler: invite.GetInviteHandler(serverCtx),
				},
				{
					// 修改邀请链接
					Method:  http.MethodPut,
					Path:    "/invites/:id",
					Handler: invite.UpdateInviteHandler(serverCtx),
				},
				{
					// 撤销邀请
					Method:  http.MethodPatch,
					Path:    "/invites/:id/revoke",
					Handler: invite.RevokeInviteHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 创建菜单
					Method:  http.MethodPost,
					Path:    "/menus",
					Handler: menu.CreateMenuHandler(serverCtx),
				},
				{
					// 菜单树
					Method:  http.MethodGet,
					Path:    "/menus",
					Handler: menu.GetMenuTreeHandler(serverCtx),
				},
				{
					// 菜单详情
					Method:  http.MethodGet,
					Path:    "/menus/:id",
					Handler: menu.GetMenuHandler(serverCtx),
				},
				{
					// 更新菜单
					Method:  http.MethodPut,
					Path:    "/menus/:id",
					Handler: menu.UpdateMenuHandler(serverCtx),
				},
				{
					// 删除菜单
					Method:  http.MethodDelete,
					Path:    "/menus/:id",
					Handler: menu.DeleteMenuHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 代理报表
					Method:  http.MethodGet,
					Path:    "/reports/agents/:agentId",
					Handler: report.GetAgentReportHandler(serverCtx),
				},
				{
					// 平台总览报表
					Method:  http.MethodGet,
					Path:    "/reports/platform",
					Handler: report.GetPlatformReportHandler(serverCtx),
				},
				{
					// 总代报表
					Method:  http.MethodGet,
					Path:    "/reports/super-agents/:superAgentId",
					Handler: report.GetSuperAgentReportHandler(serverCtx),
				},
				{
					// 用户报表
					Method:  http.MethodGet,
					Path:    "/reports/users/:userId",
					Handler: report.GetUserReportHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 创建角色
					Method:  http.MethodPost,
					Path:    "/roles",
					Handler: role.CreateRoleHandler(serverCtx),
				},
				{
					// 获取角色列表
					Method:  http.MethodGet,
					Path:    "/roles",
					Handler: role.ListRolesHandler(serverCtx),
				},
				{
					// 获取角色详情
					Method:  http.MethodGet,
					Path:    "/roles/:id",
					Handler: role.GetRoleHandler(serverCtx),
				},
				{
					// 更新角色
					Method:  http.MethodPut,
					Path:    "/roles/:id",
					Handler: role.UpdateRoleHandler(serverCtx),
				},
				{
					// 删除角色
					Method:  http.MethodDelete,
					Path:    "/roles/:id",
					Handler: role.DeleteRoleHandler(serverCtx),
				},
				{
					// 分配菜单
					Method:  http.MethodPost,
					Path:    "/roles/:id/menus",
					Handler: role.AssignMenusHandler(serverCtx),
				},
				{
					// 获取角色菜单
					Method:  http.MethodGet,
					Path:    "/roles/:id/menus",
					Handler: role.GetRoleMenusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 添加人员
					Method:  http.MethodPost,
					Path:    "/staff",
					Handler: staff.CreateStaffHandler(serverCtx),
				},
				{
					// 人员列表
					Method:  http.MethodGet,
					Path:    "/staff",
					Handler: staff.ListStaffHandler(serverCtx),
				},
				{
					// 人员详情
					Method:  http.MethodGet,
					Path:    "/staff/:id",
					Handler: staff.GetStaffHandler(serverCtx),
				},
				{
					// 更新人员
					Method:  http.MethodPut,
					Path:    "/staff/:id",
					Handler: staff.UpdateStaffHandler(serverCtx),
				},
				{
					// 删除人员
					Method:  http.MethodDelete,
					Path:    "/staff/:id",
					Handler: staff.DeleteStaffHandler(serverCtx),
				},
				{
					// 人员菜单
					Method:  http.MethodGet,
					Path:    "/staff/:id/menus",
					Handler: staff.GetStaffMenusHandler(serverCtx),
				},
				{
					// 重设密码
					Method:  http.MethodPatch,
					Path:    "/staff/:id/password",
					Handler: staff.ResetStaffPasswordHandler(serverCtx),
				},
				{
					// 设置角色
					Method:  http.MethodPatch,
					Path:    "/staff/:id/role",
					Handler: staff.SetStaffRolesHandler(serverCtx),
				},
				{
					// 更新状态
					Method:  http.MethodPatch,
					Path:    "/staff/:id/status",
					Handler: staff.UpdateStaffStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 获取系统配置
					Method:  http.MethodGet,
					Path:    "/system/config",
					Handler: system.GetSystemConfigHandler(serverCtx),
				},
				{
					// 更新系统配置
					Method:  http.MethodPut,
					Path:    "/system/config",
					Handler: system.UpdateSystemConfigHandler(serverCtx),
				},
				{
					// 获取分类配置
					Method:  http.MethodGet,
					Path:    "/system/config/:category",
					Handler: system.GetSystemConfigByCategoryHandler(serverCtx),
				},
				{
					// 按分类更新系统配置
					Method:  http.MethodPut,
					Path:    "/system/config/:category",
					Handler: system.UpdateSystemConfigByCategoryHandler(serverCtx),
				},
				{
					// 获取配置历史
					Method:  http.MethodGet,
					Path:    "/system/config/history",
					Handler: system.GetConfigHistoryHandler(serverCtx),
				},
				{
					// 重置系统配置
					Method:  http.MethodPost,
					Path:    "/system/config/reset",
					Handler: system.ResetSystemConfigHandler(serverCtx),
				},
				{
					// 获取系统状态
					Method:  http.MethodGet,
					Path:    "/system/status",
					Handler: system.GetSystemStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.SignCheck, serverCtx.JwtAuth},
			[]rest.Route{
				{
					// 用户列表
					Method:  http.MethodGet,
					Path:    "/users",
					Handler: user.ListUsersHandler(serverCtx),
				},
				{
					// 用户详情
					Method:  http.MethodGet,
					Path:    "/users/:id",
					Handler: user.GetUserHandler(serverCtx),
				},
				{
					// 更新用户信息
					Method:  http.MethodPut,
					Path:    "/users/:id",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					// 用户国家授权
					Method:  http.MethodPatch,
					Path:    "/users/:id/countries",
					Handler: user.UpdateUserCountryAuthHandler(serverCtx),
				},
				{
					// 获取用户邮箱列表
					Method:  http.MethodGet,
					Path:    "/users/:id/emails",
					Handler: user.GetUserEmailsHandler(serverCtx),
				},
				{
					// 添加用户邮箱
					Method:  http.MethodPost,
					Path:    "/users/:id/emails",
					Handler: user.AddUserEmailHandler(serverCtx),
				},
				{
					// 删除用户邮箱
					Method:  http.MethodDelete,
					Path:    "/users/:id/emails/:emailId",
					Handler: user.RemoveUserEmailHandler(serverCtx),
				},
				{
					// 更新用户手续费
					Method:  http.MethodPatch,
					Path:    "/users/:id/fees",
					Handler: user.UpdateUserFeesHandler(serverCtx),
				},
				{
					// 用户层级关系
					Method:  http.MethodGet,
					Path:    "/users/:id/hierarchy",
					Handler: user.GetUserHierarchyHandler(serverCtx),
				},
				{
					// 更新用户资料
					Method:  http.MethodPut,
					Path:    "/users/:id/profile",
					Handler: user.UpdateUserProfileHandler(serverCtx),
				},
				{
					// 更新用户状态
					Method:  http.MethodPatch,
					Path:    "/users/:id/status",
					Handler: user.UpdateUserStatusHandler(serverCtx),
				},
				{
					// 下级用户列表
					Method:  http.MethodGet,
					Path:    "/users/:id/sub-users",
					Handler: user.GetSubUsersHandler(serverCtx),
				},
				{
					// 创建总代
					Method:  http.MethodPost,
					Path:    "/users/super-agents",
					Handler: user.CreateSuperAgentHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/admin"),
	)
}
