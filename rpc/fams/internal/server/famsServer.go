// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: service.proto

package server

import (
	"context"

	"akatm/rpc/fams/internal/logic"
	"akatm/rpc/fams/internal/svc"
	"akatm/rpc/fams/pb/famsRpc"
)

type FamsServer struct {
	svcCtx *svc.ServiceContext
	famsRpc.UnimplementedFamsServer
}

func NewFamsServer(svcCtx *svc.ServiceContext) *FamsServer {
	return &FamsServer{
		svcCtx: svcCtx,
	}
}

// ============ 银行客户管理相关 ============
func (s *FamsServer) CreateBankCustomer(ctx context.Context, in *famsRpc.CreateBankCustomerReq) (*famsRpc.CreateBankCustomerResp, error) {
	l := logic.NewCreateBankCustomerLogic(ctx, s.svcCtx)
	return l.CreateBankCustomer(in)
}

// 获取银行客户
func (s *FamsServer) GetBankCustomer(ctx context.Context, in *famsRpc.GetBankCustomerReq) (*famsRpc.GetBankCustomerResp, error) {
	l := logic.NewGetBankCustomerLogic(ctx, s.svcCtx)
	return l.GetBankCustomer(in)
}

// 更新银行客户
func (s *FamsServer) UpdateBankCustomer(ctx context.Context, in *famsRpc.UpdateBankCustomerReq) (*famsRpc.UpdateBankCustomerResp, error) {
	l := logic.NewUpdateBankCustomerLogic(ctx, s.svcCtx)
	return l.UpdateBankCustomer(in)
}

// 删除银行客户
func (s *FamsServer) DeleteBankCustomer(ctx context.Context, in *famsRpc.DeleteBankCustomerReq) (*famsRpc.DeleteBankCustomerResp, error) {
	l := logic.NewDeleteBankCustomerLogic(ctx, s.svcCtx)
	return l.DeleteBankCustomer(in)
}

// 获取银行客户列表
func (s *FamsServer) ListBankCustomers(ctx context.Context, in *famsRpc.ListBankCustomersReq) (*famsRpc.ListBankCustomersResp, error) {
	l := logic.NewListBankCustomersLogic(ctx, s.svcCtx)
	return l.ListBankCustomers(in)
}

// ============ 银行账户管理相关 ============
func (s *FamsServer) CreateBankAccount(ctx context.Context, in *famsRpc.CreateBankAccountReq) (*famsRpc.CreateBankAccountResp, error) {
	l := logic.NewCreateBankAccountLogic(ctx, s.svcCtx)
	return l.CreateBankAccount(in)
}

// 获取银行账户
func (s *FamsServer) GetBankAccount(ctx context.Context, in *famsRpc.GetBankAccountReq) (*famsRpc.GetBankAccountResp, error) {
	l := logic.NewGetBankAccountLogic(ctx, s.svcCtx)
	return l.GetBankAccount(in)
}

// 更新银行账户
func (s *FamsServer) UpdateBankAccount(ctx context.Context, in *famsRpc.UpdateBankAccountReq) (*famsRpc.UpdateBankAccountResp, error) {
	l := logic.NewUpdateBankAccountLogic(ctx, s.svcCtx)
	return l.UpdateBankAccount(in)
}

// 删除银行账户
func (s *FamsServer) DeleteBankAccount(ctx context.Context, in *famsRpc.DeleteBankAccountReq) (*famsRpc.DeleteBankAccountResp, error) {
	l := logic.NewDeleteBankAccountLogic(ctx, s.svcCtx)
	return l.DeleteBankAccount(in)
}

// 获取银行账户列表
func (s *FamsServer) ListBankAccounts(ctx context.Context, in *famsRpc.ListBankAccountsReq) (*famsRpc.ListBankAccountsResp, error) {
	l := logic.NewListBankAccountsLogic(ctx, s.svcCtx)
	return l.ListBankAccounts(in)
}

// ============ 银行账户申请相关 ============
func (s *FamsServer) CreateBankAccountApplication(ctx context.Context, in *famsRpc.CreateBankAccountApplicationReq) (*famsRpc.CreateBankAccountApplicationResp, error) {
	l := logic.NewCreateBankAccountApplicationLogic(ctx, s.svcCtx)
	return l.CreateBankAccountApplication(in)
}

// 获取银行账户申请
func (s *FamsServer) GetBankAccountApplication(ctx context.Context, in *famsRpc.GetBankAccountApplicationReq) (*famsRpc.GetBankAccountApplicationResp, error) {
	l := logic.NewGetBankAccountApplicationLogic(ctx, s.svcCtx)
	return l.GetBankAccountApplication(in)
}

// 更新银行账户申请
func (s *FamsServer) UpdateBankAccountApplication(ctx context.Context, in *famsRpc.UpdateBankAccountApplicationReq) (*famsRpc.UpdateBankAccountApplicationResp, error) {
	l := logic.NewUpdateBankAccountApplicationLogic(ctx, s.svcCtx)
	return l.UpdateBankAccountApplication(in)
}

// 审核银行账户申请
func (s *FamsServer) AuditBankAccountApplication(ctx context.Context, in *famsRpc.AuditBankAccountApplicationReq) (*famsRpc.AuditBankAccountApplicationResp, error) {
	l := logic.NewAuditBankAccountApplicationLogic(ctx, s.svcCtx)
	return l.AuditBankAccountApplication(in)
}

// 获取银行账户申请列表
func (s *FamsServer) ListBankAccountApplications(ctx context.Context, in *famsRpc.ListBankAccountApplicationsReq) (*famsRpc.ListBankAccountApplicationsResp, error) {
	l := logic.NewListBankAccountApplicationsLogic(ctx, s.svcCtx)
	return l.ListBankAccountApplications(in)
}

// ============ 用户钱包管理相关 ============
func (s *FamsServer) CreateUserWallet(ctx context.Context, in *famsRpc.CreateUserWalletReq) (*famsRpc.CreateUserWalletResp, error) {
	l := logic.NewCreateUserWalletLogic(ctx, s.svcCtx)
	return l.CreateUserWallet(in)
}

// 获取用户钱包
func (s *FamsServer) GetUserWallet(ctx context.Context, in *famsRpc.GetUserWalletReq) (*famsRpc.GetUserWalletResp, error) {
	l := logic.NewGetUserWalletLogic(ctx, s.svcCtx)
	return l.GetUserWallet(in)
}

// 更新用户钱包
func (s *FamsServer) UpdateUserWallet(ctx context.Context, in *famsRpc.UpdateUserWalletReq) (*famsRpc.UpdateUserWalletResp, error) {
	l := logic.NewUpdateUserWalletLogic(ctx, s.svcCtx)
	return l.UpdateUserWallet(in)
}

// 获取用户钱包列表
func (s *FamsServer) ListUserWallets(ctx context.Context, in *famsRpc.ListUserWalletsReq) (*famsRpc.ListUserWalletsResp, error) {
	l := logic.NewListUserWalletsLogic(ctx, s.svcCtx)
	return l.ListUserWallets(in)
}

// ============ 钱包地址管理相关 ============
func (s *FamsServer) CreateUserWalletAddress(ctx context.Context, in *famsRpc.CreateUserWalletAddressReq) (*famsRpc.CreateUserWalletAddressResp, error) {
	l := logic.NewCreateUserWalletAddressLogic(ctx, s.svcCtx)
	return l.CreateUserWalletAddress(in)
}

// 获取钱包地址
func (s *FamsServer) GetUserWalletAddress(ctx context.Context, in *famsRpc.GetUserWalletAddressReq) (*famsRpc.GetUserWalletAddressResp, error) {
	l := logic.NewGetUserWalletAddressLogic(ctx, s.svcCtx)
	return l.GetUserWalletAddress(in)
}

// 更新钱包地址
func (s *FamsServer) UpdateUserWalletAddress(ctx context.Context, in *famsRpc.UpdateUserWalletAddressReq) (*famsRpc.UpdateUserWalletAddressResp, error) {
	l := logic.NewUpdateUserWalletAddressLogic(ctx, s.svcCtx)
	return l.UpdateUserWalletAddress(in)
}

// 删除钱包地址
func (s *FamsServer) DeleteUserWalletAddress(ctx context.Context, in *famsRpc.DeleteUserWalletAddressReq) (*famsRpc.DeleteUserWalletAddressResp, error) {
	l := logic.NewDeleteUserWalletAddressLogic(ctx, s.svcCtx)
	return l.DeleteUserWalletAddress(in)
}

// 获取钱包地址列表
func (s *FamsServer) ListUserWalletAddresses(ctx context.Context, in *famsRpc.ListUserWalletAddressesReq) (*famsRpc.ListUserWalletAddressesResp, error) {
	l := logic.NewListUserWalletAddressesLogic(ctx, s.svcCtx)
	return l.ListUserWalletAddresses(in)
}

// 审核钱包地址
func (s *FamsServer) AuditUserWalletAddress(ctx context.Context, in *famsRpc.AuditUserWalletAddressReq) (*famsRpc.AuditUserWalletAddressResp, error) {
	l := logic.NewAuditUserWalletAddressLogic(ctx, s.svcCtx)
	return l.AuditUserWalletAddress(in)
}

// ============ 提现管理相关 ============
func (s *FamsServer) CreateUserWalletWithdrawal(ctx context.Context, in *famsRpc.CreateUserWalletWithdrawalReq) (*famsRpc.CreateUserWalletWithdrawalResp, error) {
	l := logic.NewCreateUserWalletWithdrawalLogic(ctx, s.svcCtx)
	return l.CreateUserWalletWithdrawal(in)
}

// 获取提现记录
func (s *FamsServer) GetUserWalletWithdrawal(ctx context.Context, in *famsRpc.GetUserWalletWithdrawalReq) (*famsRpc.GetUserWalletWithdrawalResp, error) {
	l := logic.NewGetUserWalletWithdrawalLogic(ctx, s.svcCtx)
	return l.GetUserWalletWithdrawal(in)
}

// 更新提现记录
func (s *FamsServer) UpdateUserWalletWithdrawal(ctx context.Context, in *famsRpc.UpdateUserWalletWithdrawalReq) (*famsRpc.UpdateUserWalletWithdrawalResp, error) {
	l := logic.NewUpdateUserWalletWithdrawalLogic(ctx, s.svcCtx)
	return l.UpdateUserWalletWithdrawal(in)
}

// 审核提现申请
func (s *FamsServer) AuditUserWalletWithdrawal(ctx context.Context, in *famsRpc.AuditUserWalletWithdrawalReq) (*famsRpc.AuditUserWalletWithdrawalResp, error) {
	l := logic.NewAuditUserWalletWithdrawalLogic(ctx, s.svcCtx)
	return l.AuditUserWalletWithdrawal(in)
}

// 获取提现记录列表
func (s *FamsServer) ListUserWalletWithdrawals(ctx context.Context, in *famsRpc.ListUserWalletWithdrawalsReq) (*famsRpc.ListUserWalletWithdrawalsResp, error) {
	l := logic.NewListUserWalletWithdrawalsLogic(ctx, s.svcCtx)
	return l.ListUserWalletWithdrawals(in)
}

// ============ 资金操作相关 ============
func (s *FamsServer) FreezeUserWallet(ctx context.Context, in *famsRpc.FreezeUserWalletReq) (*famsRpc.FreezeUserWalletResp, error) {
	l := logic.NewFreezeUserWalletLogic(ctx, s.svcCtx)
	return l.FreezeUserWallet(in)
}

// 解冻资金
func (s *FamsServer) UnfreezeUserWallet(ctx context.Context, in *famsRpc.UnfreezeUserWalletReq) (*famsRpc.UnfreezeUserWalletResp, error) {
	l := logic.NewUnfreezeUserWalletLogic(ctx, s.svcCtx)
	return l.UnfreezeUserWallet(in)
}

// 扣减资金
func (s *FamsServer) DeductUserWallet(ctx context.Context, in *famsRpc.DeductUserWalletReq) (*famsRpc.DeductUserWalletResp, error) {
	l := logic.NewDeductUserWalletLogic(ctx, s.svcCtx)
	return l.DeductUserWallet(in)
}

// 增加资金
func (s *FamsServer) AddUserWallet(ctx context.Context, in *famsRpc.AddUserWalletReq) (*famsRpc.AddUserWalletResp, error) {
	l := logic.NewAddUserWalletLogic(ctx, s.svcCtx)
	return l.AddUserWallet(in)
}

// ============ 资金明细相关 ============
func (s *FamsServer) ListFundDetails(ctx context.Context, in *famsRpc.ListFundDetailsReq) (*famsRpc.ListFundDetailsResp, error) {
	l := logic.NewListFundDetailsLogic(ctx, s.svcCtx)
	return l.ListFundDetails(in)
}

// 获取资金明细详情
func (s *FamsServer) GetFundDetail(ctx context.Context, in *famsRpc.GetFundDetailReq) (*famsRpc.GetFundDetailResp, error) {
	l := logic.NewGetFundDetailLogic(ctx, s.svcCtx)
	return l.GetFundDetail(in)
}

// 获取资金统计总览
func (s *FamsServer) GetFundSummary(ctx context.Context, in *famsRpc.GetFundSummaryReq) (*famsRpc.GetFundSummaryResp, error) {
	l := logic.NewGetFundSummaryLogic(ctx, s.svcCtx)
	return l.GetFundSummary(in)
}

// 获取用户资金明细
func (s *FamsServer) GetUserFundDetails(ctx context.Context, in *famsRpc.GetUserFundDetailsReq) (*famsRpc.ListFundDetailsResp, error) {
	l := logic.NewGetUserFundDetailsLogic(ctx, s.svcCtx)
	return l.GetUserFundDetails(in)
}

// 获取代理资金明细
func (s *FamsServer) GetAgentFundDetails(ctx context.Context, in *famsRpc.GetAgentFundDetailsReq) (*famsRpc.ListFundDetailsResp, error) {
	l := logic.NewGetAgentFundDetailsLogic(ctx, s.svcCtx)
	return l.GetAgentFundDetails(in)
}

// 获取账户流水
func (s *FamsServer) ListAccountTransactions(ctx context.Context, in *famsRpc.ListAccountTransactionsReq) (*famsRpc.ListAccountTransactionsResp, error) {
	l := logic.NewListAccountTransactionsLogic(ctx, s.svcCtx)
	return l.ListAccountTransactions(in)
}
