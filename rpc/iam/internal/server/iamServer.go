// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: service.proto

package server

import (
	"context"

	"akatm/rpc/iam/internal/logic"
	"akatm/rpc/iam/internal/svc"
	"akatm/rpc/iam/pb/iamRpc"
)

type IamServer struct {
	svcCtx *svc.ServiceContext
	iamRpc.UnimplementedIamServer
}

func NewIamServer(svcCtx *svc.ServiceContext) *IamServer {
	return &IamServer{
		svcCtx: svcCtx,
	}
}

// ============ 登录注册相关 ============
func (s *IamServer) Login(ctx context.Context, in *iamRpc.LoginReq) (*iamRpc.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

// 注册
func (s *IamServer) Register(ctx context.Context, in *iamRpc.RegisterReq) (*iamRpc.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// 登出
func (s *IamServer) Logout(ctx context.Context, in *iamRpc.LogoutReq) (*iamRpc.LogoutResp, error) {
	l := logic.NewLogoutLogic(ctx, s.svcCtx)
	return l.Logout(in)
}

// 刷新Token
func (s *IamServer) RefreshToken(ctx context.Context, in *iamRpc.RefreshTokenReq) (*iamRpc.RefreshTokenResp, error) {
	l := logic.NewRefreshTokenLogic(ctx, s.svcCtx)
	return l.RefreshToken(in)
}

// ============ 用户管理相关 ============
func (s *IamServer) GetUser(ctx context.Context, in *iamRpc.GetUserReq) (*iamRpc.GetUserResp, error) {
	l := logic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

// 更新用户资料
func (s *IamServer) UpdateProfile(ctx context.Context, in *iamRpc.UpdateProfileReq) (*iamRpc.UpdateProfileResp, error) {
	l := logic.NewUpdateProfileLogic(ctx, s.svcCtx)
	return l.UpdateProfile(in)
}

// 修改密码
func (s *IamServer) ChangePassword(ctx context.Context, in *iamRpc.ChangePasswordReq) (*iamRpc.ChangePasswordResp, error) {
	l := logic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

// 绑定邮箱
func (s *IamServer) BindEmail(ctx context.Context, in *iamRpc.BindEmailReq) (*iamRpc.BindEmailResp, error) {
	l := logic.NewBindEmailLogic(ctx, s.svcCtx)
	return l.BindEmail(in)
}

// 解绑邮箱
func (s *IamServer) UnbindEmail(ctx context.Context, in *iamRpc.UnbindEmailReq) (*iamRpc.UnbindEmailResp, error) {
	l := logic.NewUnbindEmailLogic(ctx, s.svcCtx)
	return l.UnbindEmail(in)
}

// 获取用户列表
func (s *IamServer) ListUsers(ctx context.Context, in *iamRpc.ListUsersReq) (*iamRpc.ListUsersResp, error) {
	l := logic.NewListUsersLogic(ctx, s.svcCtx)
	return l.ListUsers(in)
}

// ============ 邀请管理相关 ============
func (s *IamServer) GenerateInvite(ctx context.Context, in *iamRpc.GenerateInviteReq) (*iamRpc.GenerateInviteResp, error) {
	l := logic.NewGenerateInviteLogic(ctx, s.svcCtx)
	return l.GenerateInvite(in)
}

// 验证邀请码
func (s *IamServer) ValidateInvite(ctx context.Context, in *iamRpc.ValidateInviteReq) (*iamRpc.ValidateInviteResp, error) {
	l := logic.NewValidateInviteLogic(ctx, s.svcCtx)
	return l.ValidateInvite(in)
}

// 使用邀请码
func (s *IamServer) UseInvite(ctx context.Context, in *iamRpc.UseInviteReq) (*iamRpc.UseInviteResp, error) {
	l := logic.NewUseInviteLogic(ctx, s.svcCtx)
	return l.UseInvite(in)
}

// 获取邀请列表
func (s *IamServer) ListInvites(ctx context.Context, in *iamRpc.ListInvitesReq) (*iamRpc.ListInvitesResp, error) {
	l := logic.NewListInvitesLogic(ctx, s.svcCtx)
	return l.ListInvites(in)
}

// 获取邀请详情
func (s *IamServer) GetInvite(ctx context.Context, in *iamRpc.GetInviteReq) (*iamRpc.GetInviteResp, error) {
	l := logic.NewGetInviteLogic(ctx, s.svcCtx)
	return l.GetInvite(in)
}

// ============ 会话管理相关 ============
func (s *IamServer) CreateSession(ctx context.Context, in *iamRpc.CreateSessionReq) (*iamRpc.CreateSessionResp, error) {
	l := logic.NewCreateSessionLogic(ctx, s.svcCtx)
	return l.CreateSession(in)
}

// 验证会话
func (s *IamServer) ValidateSession(ctx context.Context, in *iamRpc.ValidateSessionReq) (*iamRpc.ValidateSessionResp, error) {
	l := logic.NewValidateSessionLogic(ctx, s.svcCtx)
	return l.ValidateSession(in)
}

// 删除会话
func (s *IamServer) DeleteSession(ctx context.Context, in *iamRpc.DeleteSessionReq) (*iamRpc.DeleteSessionResp, error) {
	l := logic.NewDeleteSessionLogic(ctx, s.svcCtx)
	return l.DeleteSession(in)
}

// 获取用户所有会话
func (s *IamServer) ListSessions(ctx context.Context, in *iamRpc.ListSessionsReq) (*iamRpc.ListSessionsResp, error) {
	l := logic.NewListSessionsLogic(ctx, s.svcCtx)
	return l.ListSessions(in)
}
