// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: service.proto

package iam

import (
	"context"

	"akatm/rpc/iam/pb/iamRpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResp            = iamRpc.BaseResp
	BindEmailReq        = iamRpc.BindEmailReq
	BindEmailResp       = iamRpc.BindEmailResp
	ChangePasswordReq   = iamRpc.ChangePasswordReq
	ChangePasswordResp  = iamRpc.ChangePasswordResp
	CreateSessionReq    = iamRpc.CreateSessionReq
	CreateSessionResp   = iamRpc.CreateSessionResp
	DeleteSessionReq    = iamRpc.DeleteSessionReq
	DeleteSessionResp   = iamRpc.DeleteSessionResp
	GenerateInviteReq   = iamRpc.GenerateInviteReq
	GenerateInviteResp  = iamRpc.GenerateInviteResp
	GetInviteReq        = iamRpc.GetInviteReq
	GetInviteResp       = iamRpc.GetInviteResp
	GetUserReq          = iamRpc.GetUserReq
	GetUserResp         = iamRpc.GetUserResp
	ListInvitesData     = iamRpc.ListInvitesData
	ListInvitesReq      = iamRpc.ListInvitesReq
	ListInvitesResp     = iamRpc.ListInvitesResp
	ListSessionsData    = iamRpc.ListSessionsData
	ListSessionsReq     = iamRpc.ListSessionsReq
	ListSessionsResp    = iamRpc.ListSessionsResp
	ListUsersData       = iamRpc.ListUsersData
	ListUsersReq        = iamRpc.ListUsersReq
	ListUsersResp       = iamRpc.ListUsersResp
	LoginData           = iamRpc.LoginData
	LoginReq            = iamRpc.LoginReq
	LoginResp           = iamRpc.LoginResp
	LogoutReq           = iamRpc.LogoutReq
	LogoutResp          = iamRpc.LogoutResp
	PageReq             = iamRpc.PageReq
	PageResp            = iamRpc.PageResp
	RefreshTokenData    = iamRpc.RefreshTokenData
	RefreshTokenReq     = iamRpc.RefreshTokenReq
	RefreshTokenResp    = iamRpc.RefreshTokenResp
	RegisterData        = iamRpc.RegisterData
	RegisterReq         = iamRpc.RegisterReq
	RegisterResp        = iamRpc.RegisterResp
	UnbindEmailReq      = iamRpc.UnbindEmailReq
	UnbindEmailResp     = iamRpc.UnbindEmailResp
	UpdateProfileReq    = iamRpc.UpdateProfileReq
	UpdateProfileResp   = iamRpc.UpdateProfileResp
	UseInviteReq        = iamRpc.UseInviteReq
	UseInviteResp       = iamRpc.UseInviteResp
	UserCredential      = iamRpc.UserCredential
	UserEmail           = iamRpc.UserEmail
	UserInfo            = iamRpc.UserInfo
	UserInvite          = iamRpc.UserInvite
	UserProfile         = iamRpc.UserProfile
	UserSession         = iamRpc.UserSession
	ValidateInviteData  = iamRpc.ValidateInviteData
	ValidateInviteReq   = iamRpc.ValidateInviteReq
	ValidateInviteResp  = iamRpc.ValidateInviteResp
	ValidateSessionData = iamRpc.ValidateSessionData
	ValidateSessionReq  = iamRpc.ValidateSessionReq
	ValidateSessionResp = iamRpc.ValidateSessionResp

	Iam interface {
		// ============ 登录注册相关 ============
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		// 注册
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		// 登出
		Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
		// 刷新Token
		RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error)
		// ============ 用户管理相关 ============
		GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
		// 更新用户资料
		UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*UpdateProfileResp, error)
		// 修改密码
		ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
		// 绑定邮箱
		BindEmail(ctx context.Context, in *BindEmailReq, opts ...grpc.CallOption) (*BindEmailResp, error)
		// 解绑邮箱
		UnbindEmail(ctx context.Context, in *UnbindEmailReq, opts ...grpc.CallOption) (*UnbindEmailResp, error)
		// 获取用户列表
		ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error)
		// ============ 邀请管理相关 ============
		GenerateInvite(ctx context.Context, in *GenerateInviteReq, opts ...grpc.CallOption) (*GenerateInviteResp, error)
		// 验证邀请码
		ValidateInvite(ctx context.Context, in *ValidateInviteReq, opts ...grpc.CallOption) (*ValidateInviteResp, error)
		// 使用邀请码
		UseInvite(ctx context.Context, in *UseInviteReq, opts ...grpc.CallOption) (*UseInviteResp, error)
		// 获取邀请列表
		ListInvites(ctx context.Context, in *ListInvitesReq, opts ...grpc.CallOption) (*ListInvitesResp, error)
		// 获取邀请详情
		GetInvite(ctx context.Context, in *GetInviteReq, opts ...grpc.CallOption) (*GetInviteResp, error)
		// ============ 会话管理相关 ============
		CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionResp, error)
		// 验证会话
		ValidateSession(ctx context.Context, in *ValidateSessionReq, opts ...grpc.CallOption) (*ValidateSessionResp, error)
		// 删除会话
		DeleteSession(ctx context.Context, in *DeleteSessionReq, opts ...grpc.CallOption) (*DeleteSessionResp, error)
		// 获取用户所有会话
		ListSessions(ctx context.Context, in *ListSessionsReq, opts ...grpc.CallOption) (*ListSessionsResp, error)
	}

	defaultIam struct {
		cli zrpc.Client
	}
)

func NewIam(cli zrpc.Client) Iam {
	return &defaultIam{
		cli: cli,
	}
}

// ============ 登录注册相关 ============
func (m *defaultIam) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

// 注册
func (m *defaultIam) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// 登出
func (m *defaultIam) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

// 刷新Token
func (m *defaultIam) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.RefreshToken(ctx, in, opts...)
}

// ============ 用户管理相关 ============
func (m *defaultIam) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

// 更新用户资料
func (m *defaultIam) UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*UpdateProfileResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.UpdateProfile(ctx, in, opts...)
}

// 修改密码
func (m *defaultIam) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

// 绑定邮箱
func (m *defaultIam) BindEmail(ctx context.Context, in *BindEmailReq, opts ...grpc.CallOption) (*BindEmailResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.BindEmail(ctx, in, opts...)
}

// 解绑邮箱
func (m *defaultIam) UnbindEmail(ctx context.Context, in *UnbindEmailReq, opts ...grpc.CallOption) (*UnbindEmailResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.UnbindEmail(ctx, in, opts...)
}

// 获取用户列表
func (m *defaultIam) ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.ListUsers(ctx, in, opts...)
}

// ============ 邀请管理相关 ============
func (m *defaultIam) GenerateInvite(ctx context.Context, in *GenerateInviteReq, opts ...grpc.CallOption) (*GenerateInviteResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.GenerateInvite(ctx, in, opts...)
}

// 验证邀请码
func (m *defaultIam) ValidateInvite(ctx context.Context, in *ValidateInviteReq, opts ...grpc.CallOption) (*ValidateInviteResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.ValidateInvite(ctx, in, opts...)
}

// 使用邀请码
func (m *defaultIam) UseInvite(ctx context.Context, in *UseInviteReq, opts ...grpc.CallOption) (*UseInviteResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.UseInvite(ctx, in, opts...)
}

// 获取邀请列表
func (m *defaultIam) ListInvites(ctx context.Context, in *ListInvitesReq, opts ...grpc.CallOption) (*ListInvitesResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.ListInvites(ctx, in, opts...)
}

// 获取邀请详情
func (m *defaultIam) GetInvite(ctx context.Context, in *GetInviteReq, opts ...grpc.CallOption) (*GetInviteResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.GetInvite(ctx, in, opts...)
}

// ============ 会话管理相关 ============
func (m *defaultIam) CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.CreateSession(ctx, in, opts...)
}

// 验证会话
func (m *defaultIam) ValidateSession(ctx context.Context, in *ValidateSessionReq, opts ...grpc.CallOption) (*ValidateSessionResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.ValidateSession(ctx, in, opts...)
}

// 删除会话
func (m *defaultIam) DeleteSession(ctx context.Context, in *DeleteSessionReq, opts ...grpc.CallOption) (*DeleteSessionResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.DeleteSession(ctx, in, opts...)
}

// 获取用户所有会话
func (m *defaultIam) ListSessions(ctx context.Context, in *ListSessionsReq, opts ...grpc.CallOption) (*ListSessionsResp, error) {
	client := iamRpc.NewIamClient(m.cli.Conn())
	return client.ListSessions(ctx, in, opts...)
}
