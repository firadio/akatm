// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.17.3
// source: rpc/iam/proto/service.proto

package iamRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Iam_Login_FullMethodName           = "/iam.Iam/Login"
	Iam_Register_FullMethodName        = "/iam.Iam/Register"
	Iam_Logout_FullMethodName          = "/iam.Iam/Logout"
	Iam_RefreshToken_FullMethodName    = "/iam.Iam/RefreshToken"
	Iam_GetUser_FullMethodName         = "/iam.Iam/GetUser"
	Iam_UpdateProfile_FullMethodName   = "/iam.Iam/UpdateProfile"
	Iam_ChangePassword_FullMethodName  = "/iam.Iam/ChangePassword"
	Iam_BindEmail_FullMethodName       = "/iam.Iam/BindEmail"
	Iam_UnbindEmail_FullMethodName     = "/iam.Iam/UnbindEmail"
	Iam_ListUsers_FullMethodName       = "/iam.Iam/ListUsers"
	Iam_GenerateInvite_FullMethodName  = "/iam.Iam/GenerateInvite"
	Iam_ValidateInvite_FullMethodName  = "/iam.Iam/ValidateInvite"
	Iam_UseInvite_FullMethodName       = "/iam.Iam/UseInvite"
	Iam_ListInvites_FullMethodName     = "/iam.Iam/ListInvites"
	Iam_GetInvite_FullMethodName       = "/iam.Iam/GetInvite"
	Iam_CreateSession_FullMethodName   = "/iam.Iam/CreateSession"
	Iam_ValidateSession_FullMethodName = "/iam.Iam/ValidateSession"
	Iam_DeleteSession_FullMethodName   = "/iam.Iam/DeleteSession"
	Iam_ListSessions_FullMethodName    = "/iam.Iam/ListSessions"
)

// IamClient is the client API for Iam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============ IAM 身份认证服务 ============
type IamClient interface {
	// ============ 登录注册相关 ============
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// 注册
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	// 登出
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	// 刷新Token
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error)
	// ============ 用户管理相关 ============
	// 获取用户
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	// 更新用户资料
	UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*UpdateProfileResp, error)
	// 修改密码
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	// 绑定邮箱
	BindEmail(ctx context.Context, in *BindEmailReq, opts ...grpc.CallOption) (*BindEmailResp, error)
	// 解绑邮箱
	UnbindEmail(ctx context.Context, in *UnbindEmailReq, opts ...grpc.CallOption) (*UnbindEmailResp, error)
	// 获取用户列表
	ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error)
	// ============ 邀请管理相关 ============
	// 生成邀请码
	GenerateInvite(ctx context.Context, in *GenerateInviteReq, opts ...grpc.CallOption) (*GenerateInviteResp, error)
	// 验证邀请码
	ValidateInvite(ctx context.Context, in *ValidateInviteReq, opts ...grpc.CallOption) (*ValidateInviteResp, error)
	// 使用邀请码
	UseInvite(ctx context.Context, in *UseInviteReq, opts ...grpc.CallOption) (*UseInviteResp, error)
	// 获取邀请列表
	ListInvites(ctx context.Context, in *ListInvitesReq, opts ...grpc.CallOption) (*ListInvitesResp, error)
	// 获取邀请详情
	GetInvite(ctx context.Context, in *GetInviteReq, opts ...grpc.CallOption) (*GetInviteResp, error)
	// ============ 会话管理相关 ============
	// 创建会话
	CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionResp, error)
	// 验证会话
	ValidateSession(ctx context.Context, in *ValidateSessionReq, opts ...grpc.CallOption) (*ValidateSessionResp, error)
	// 删除会话
	DeleteSession(ctx context.Context, in *DeleteSessionReq, opts ...grpc.CallOption) (*DeleteSessionResp, error)
	// 获取用户所有会话
	ListSessions(ctx context.Context, in *ListSessionsReq, opts ...grpc.CallOption) (*ListSessionsResp, error)
}

type iamClient struct {
	cc grpc.ClientConnInterface
}

func NewIamClient(cc grpc.ClientConnInterface) IamClient {
	return &iamClient{cc}
}

func (c *iamClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, Iam_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Iam_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, Iam_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResp)
	err := c.cc.Invoke(ctx, Iam_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, Iam_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*UpdateProfileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResp)
	err := c.cc.Invoke(ctx, Iam_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, Iam_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) BindEmail(ctx context.Context, in *BindEmailReq, opts ...grpc.CallOption) (*BindEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindEmailResp)
	err := c.cc.Invoke(ctx, Iam_BindEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) UnbindEmail(ctx context.Context, in *UnbindEmailReq, opts ...grpc.CallOption) (*UnbindEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindEmailResp)
	err := c.cc.Invoke(ctx, Iam_UnbindEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListUsers(ctx context.Context, in *ListUsersReq, opts ...grpc.CallOption) (*ListUsersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResp)
	err := c.cc.Invoke(ctx, Iam_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) GenerateInvite(ctx context.Context, in *GenerateInviteReq, opts ...grpc.CallOption) (*GenerateInviteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateInviteResp)
	err := c.cc.Invoke(ctx, Iam_GenerateInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ValidateInvite(ctx context.Context, in *ValidateInviteReq, opts ...grpc.CallOption) (*ValidateInviteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateInviteResp)
	err := c.cc.Invoke(ctx, Iam_ValidateInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) UseInvite(ctx context.Context, in *UseInviteReq, opts ...grpc.CallOption) (*UseInviteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UseInviteResp)
	err := c.cc.Invoke(ctx, Iam_UseInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListInvites(ctx context.Context, in *ListInvitesReq, opts ...grpc.CallOption) (*ListInvitesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvitesResp)
	err := c.cc.Invoke(ctx, Iam_ListInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) GetInvite(ctx context.Context, in *GetInviteReq, opts ...grpc.CallOption) (*GetInviteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInviteResp)
	err := c.cc.Invoke(ctx, Iam_GetInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) CreateSession(ctx context.Context, in *CreateSessionReq, opts ...grpc.CallOption) (*CreateSessionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResp)
	err := c.cc.Invoke(ctx, Iam_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ValidateSession(ctx context.Context, in *ValidateSessionReq, opts ...grpc.CallOption) (*ValidateSessionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSessionResp)
	err := c.cc.Invoke(ctx, Iam_ValidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) DeleteSession(ctx context.Context, in *DeleteSessionReq, opts ...grpc.CallOption) (*DeleteSessionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSessionResp)
	err := c.cc.Invoke(ctx, Iam_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iamClient) ListSessions(ctx context.Context, in *ListSessionsReq, opts ...grpc.CallOption) (*ListSessionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResp)
	err := c.cc.Invoke(ctx, Iam_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IamServer is the server API for Iam service.
// All implementations must embed UnimplementedIamServer
// for forward compatibility.
//
// ============ IAM 身份认证服务 ============
type IamServer interface {
	// ============ 登录注册相关 ============
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// 注册
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	// 登出
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	// 刷新Token
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error)
	// ============ 用户管理相关 ============
	// 获取用户
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	// 更新用户资料
	UpdateProfile(context.Context, *UpdateProfileReq) (*UpdateProfileResp, error)
	// 修改密码
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	// 绑定邮箱
	BindEmail(context.Context, *BindEmailReq) (*BindEmailResp, error)
	// 解绑邮箱
	UnbindEmail(context.Context, *UnbindEmailReq) (*UnbindEmailResp, error)
	// 获取用户列表
	ListUsers(context.Context, *ListUsersReq) (*ListUsersResp, error)
	// ============ 邀请管理相关 ============
	// 生成邀请码
	GenerateInvite(context.Context, *GenerateInviteReq) (*GenerateInviteResp, error)
	// 验证邀请码
	ValidateInvite(context.Context, *ValidateInviteReq) (*ValidateInviteResp, error)
	// 使用邀请码
	UseInvite(context.Context, *UseInviteReq) (*UseInviteResp, error)
	// 获取邀请列表
	ListInvites(context.Context, *ListInvitesReq) (*ListInvitesResp, error)
	// 获取邀请详情
	GetInvite(context.Context, *GetInviteReq) (*GetInviteResp, error)
	// ============ 会话管理相关 ============
	// 创建会话
	CreateSession(context.Context, *CreateSessionReq) (*CreateSessionResp, error)
	// 验证会话
	ValidateSession(context.Context, *ValidateSessionReq) (*ValidateSessionResp, error)
	// 删除会话
	DeleteSession(context.Context, *DeleteSessionReq) (*DeleteSessionResp, error)
	// 获取用户所有会话
	ListSessions(context.Context, *ListSessionsReq) (*ListSessionsResp, error)
	mustEmbedUnimplementedIamServer()
}

// UnimplementedIamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIamServer struct{}

func (UnimplementedIamServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIamServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedIamServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedIamServer) RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedIamServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedIamServer) UpdateProfile(context.Context, *UpdateProfileReq) (*UpdateProfileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedIamServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedIamServer) BindEmail(context.Context, *BindEmailReq) (*BindEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindEmail not implemented")
}
func (UnimplementedIamServer) UnbindEmail(context.Context, *UnbindEmailReq) (*UnbindEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindEmail not implemented")
}
func (UnimplementedIamServer) ListUsers(context.Context, *ListUsersReq) (*ListUsersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedIamServer) GenerateInvite(context.Context, *GenerateInviteReq) (*GenerateInviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvite not implemented")
}
func (UnimplementedIamServer) ValidateInvite(context.Context, *ValidateInviteReq) (*ValidateInviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInvite not implemented")
}
func (UnimplementedIamServer) UseInvite(context.Context, *UseInviteReq) (*UseInviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseInvite not implemented")
}
func (UnimplementedIamServer) ListInvites(context.Context, *ListInvitesReq) (*ListInvitesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvites not implemented")
}
func (UnimplementedIamServer) GetInvite(context.Context, *GetInviteReq) (*GetInviteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvite not implemented")
}
func (UnimplementedIamServer) CreateSession(context.Context, *CreateSessionReq) (*CreateSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedIamServer) ValidateSession(context.Context, *ValidateSessionReq) (*ValidateSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSession not implemented")
}
func (UnimplementedIamServer) DeleteSession(context.Context, *DeleteSessionReq) (*DeleteSessionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedIamServer) ListSessions(context.Context, *ListSessionsReq) (*ListSessionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedIamServer) mustEmbedUnimplementedIamServer() {}
func (UnimplementedIamServer) testEmbeddedByValue()             {}

// UnsafeIamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IamServer will
// result in compilation errors.
type UnsafeIamServer interface {
	mustEmbedUnimplementedIamServer()
}

func RegisterIamServer(s grpc.ServiceRegistrar, srv IamServer) {
	// If the following call pancis, it indicates UnimplementedIamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Iam_ServiceDesc, srv)
}

func _Iam_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).UpdateProfile(ctx, req.(*UpdateProfileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_BindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).BindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_BindEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).BindEmail(ctx, req.(*BindEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_UnbindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).UnbindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_UnbindEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).UnbindEmail(ctx, req.(*UnbindEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ListUsers(ctx, req.(*ListUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_GenerateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).GenerateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_GenerateInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).GenerateInvite(ctx, req.(*GenerateInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ValidateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ValidateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ValidateInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ValidateInvite(ctx, req.(*ValidateInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_UseInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).UseInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_UseInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).UseInvite(ctx, req.(*UseInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ListInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ListInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ListInvites(ctx, req.(*ListInvitesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_GetInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInviteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).GetInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_GetInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).GetInvite(ctx, req.(*GetInviteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).CreateSession(ctx, req.(*CreateSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ValidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ValidateSession(ctx, req.(*ValidateSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).DeleteSession(ctx, req.(*DeleteSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Iam_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IamServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Iam_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IamServer).ListSessions(ctx, req.(*ListSessionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Iam_ServiceDesc is the grpc.ServiceDesc for Iam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Iam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iam.Iam",
	HandlerType: (*IamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Iam_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Iam_Register_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Iam_Logout_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Iam_RefreshToken_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Iam_GetUser_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Iam_UpdateProfile_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Iam_ChangePassword_Handler,
		},
		{
			MethodName: "BindEmail",
			Handler:    _Iam_BindEmail_Handler,
		},
		{
			MethodName: "UnbindEmail",
			Handler:    _Iam_UnbindEmail_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Iam_ListUsers_Handler,
		},
		{
			MethodName: "GenerateInvite",
			Handler:    _Iam_GenerateInvite_Handler,
		},
		{
			MethodName: "ValidateInvite",
			Handler:    _Iam_ValidateInvite_Handler,
		},
		{
			MethodName: "UseInvite",
			Handler:    _Iam_UseInvite_Handler,
		},
		{
			MethodName: "ListInvites",
			Handler:    _Iam_ListInvites_Handler,
		},
		{
			MethodName: "GetInvite",
			Handler:    _Iam_GetInvite_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _Iam_CreateSession_Handler,
		},
		{
			MethodName: "ValidateSession",
			Handler:    _Iam_ValidateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Iam_DeleteSession_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _Iam_ListSessions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/iam/proto/service.proto",
}
