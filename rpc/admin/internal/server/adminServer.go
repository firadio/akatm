// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: service.proto

package server

import (
	"context"

	"akatm/rpc/admin/internal/logic"
	"akatm/rpc/admin/internal/svc"
	"akatm/rpc/admin/pb/adminRpc"
)

type AdminServer struct {
	svcCtx *svc.ServiceContext
	adminRpc.UnimplementedAdminServer
}

func NewAdminServer(svcCtx *svc.ServiceContext) *AdminServer {
	return &AdminServer{
		svcCtx: svcCtx,
	}
}

// ============ 员工管理相关 ============
func (s *AdminServer) CreateStaff(ctx context.Context, in *adminRpc.CreateStaffReq) (*adminRpc.CreateStaffResp, error) {
	l := logic.NewCreateStaffLogic(ctx, s.svcCtx)
	return l.CreateStaff(in)
}

// 获取员工
func (s *AdminServer) GetStaff(ctx context.Context, in *adminRpc.GetStaffReq) (*adminRpc.GetStaffResp, error) {
	l := logic.NewGetStaffLogic(ctx, s.svcCtx)
	return l.GetStaff(in)
}

// 更新员工
func (s *AdminServer) UpdateStaff(ctx context.Context, in *adminRpc.UpdateStaffReq) (*adminRpc.UpdateStaffResp, error) {
	l := logic.NewUpdateStaffLogic(ctx, s.svcCtx)
	return l.UpdateStaff(in)
}

// 删除员工
func (s *AdminServer) DeleteStaff(ctx context.Context, in *adminRpc.DeleteStaffReq) (*adminRpc.DeleteStaffResp, error) {
	l := logic.NewDeleteStaffLogic(ctx, s.svcCtx)
	return l.DeleteStaff(in)
}

// 获取员工列表
func (s *AdminServer) ListStaffs(ctx context.Context, in *adminRpc.ListStaffsReq) (*adminRpc.ListStaffsResp, error) {
	l := logic.NewListStaffsLogic(ctx, s.svcCtx)
	return l.ListStaffs(in)
}

// ============ 角色管理相关 ============
func (s *AdminServer) CreateRole(ctx context.Context, in *adminRpc.CreateRoleReq) (*adminRpc.CreateRoleResp, error) {
	l := logic.NewCreateRoleLogic(ctx, s.svcCtx)
	return l.CreateRole(in)
}

// 获取角色
func (s *AdminServer) GetRole(ctx context.Context, in *adminRpc.GetRoleReq) (*adminRpc.GetRoleResp, error) {
	l := logic.NewGetRoleLogic(ctx, s.svcCtx)
	return l.GetRole(in)
}

// 更新角色
func (s *AdminServer) UpdateRole(ctx context.Context, in *adminRpc.UpdateRoleReq) (*adminRpc.UpdateRoleResp, error) {
	l := logic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

// 删除角色
func (s *AdminServer) DeleteRole(ctx context.Context, in *adminRpc.DeleteRoleReq) (*adminRpc.DeleteRoleResp, error) {
	l := logic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

// 获取角色列表
func (s *AdminServer) ListRoles(ctx context.Context, in *adminRpc.ListRolesReq) (*adminRpc.ListRolesResp, error) {
	l := logic.NewListRolesLogic(ctx, s.svcCtx)
	return l.ListRoles(in)
}

// ============ 菜单管理相关 ============
func (s *AdminServer) CreateMenu(ctx context.Context, in *adminRpc.CreateMenuReq) (*adminRpc.CreateMenuResp, error) {
	l := logic.NewCreateMenuLogic(ctx, s.svcCtx)
	return l.CreateMenu(in)
}

// 获取菜单
func (s *AdminServer) GetMenu(ctx context.Context, in *adminRpc.GetMenuReq) (*adminRpc.GetMenuResp, error) {
	l := logic.NewGetMenuLogic(ctx, s.svcCtx)
	return l.GetMenu(in)
}

// 更新菜单
func (s *AdminServer) UpdateMenu(ctx context.Context, in *adminRpc.UpdateMenuReq) (*adminRpc.UpdateMenuResp, error) {
	l := logic.NewUpdateMenuLogic(ctx, s.svcCtx)
	return l.UpdateMenu(in)
}

// 删除菜单
func (s *AdminServer) DeleteMenu(ctx context.Context, in *adminRpc.DeleteMenuReq) (*adminRpc.DeleteMenuResp, error) {
	l := logic.NewDeleteMenuLogic(ctx, s.svcCtx)
	return l.DeleteMenu(in)
}

// 获取菜单列表
func (s *AdminServer) ListMenus(ctx context.Context, in *adminRpc.ListMenusReq) (*adminRpc.ListMenusResp, error) {
	l := logic.NewListMenusLogic(ctx, s.svcCtx)
	return l.ListMenus(in)
}

// ============ 权限管理相关 ============
func (s *AdminServer) CreatePermission(ctx context.Context, in *adminRpc.CreatePermissionReq) (*adminRpc.CreatePermissionResp, error) {
	l := logic.NewCreatePermissionLogic(ctx, s.svcCtx)
	return l.CreatePermission(in)
}

// 获取权限
func (s *AdminServer) GetPermission(ctx context.Context, in *adminRpc.GetPermissionReq) (*adminRpc.GetPermissionResp, error) {
	l := logic.NewGetPermissionLogic(ctx, s.svcCtx)
	return l.GetPermission(in)
}

// 更新权限
func (s *AdminServer) UpdatePermission(ctx context.Context, in *adminRpc.UpdatePermissionReq) (*adminRpc.UpdatePermissionResp, error) {
	l := logic.NewUpdatePermissionLogic(ctx, s.svcCtx)
	return l.UpdatePermission(in)
}

// 删除权限
func (s *AdminServer) DeletePermission(ctx context.Context, in *adminRpc.DeletePermissionReq) (*adminRpc.DeletePermissionResp, error) {
	l := logic.NewDeletePermissionLogic(ctx, s.svcCtx)
	return l.DeletePermission(in)
}

// 获取权限列表
func (s *AdminServer) ListPermissions(ctx context.Context, in *adminRpc.ListPermissionsReq) (*adminRpc.ListPermissionsResp, error) {
	l := logic.NewListPermissionsLogic(ctx, s.svcCtx)
	return l.ListPermissions(in)
}

// ============ 权限分配相关 ============
func (s *AdminServer) AssignRoleToStaff(ctx context.Context, in *adminRpc.AssignRoleToStaffReq) (*adminRpc.AssignRoleToStaffResp, error) {
	l := logic.NewAssignRoleToStaffLogic(ctx, s.svcCtx)
	return l.AssignRoleToStaff(in)
}

// 分配菜单给角色
func (s *AdminServer) AssignMenuToRole(ctx context.Context, in *adminRpc.AssignMenuToRoleReq) (*adminRpc.AssignMenuToRoleResp, error) {
	l := logic.NewAssignMenuToRoleLogic(ctx, s.svcCtx)
	return l.AssignMenuToRole(in)
}

// 获取员工角色
func (s *AdminServer) GetStaffRoles(ctx context.Context, in *adminRpc.GetStaffRolesReq) (*adminRpc.GetStaffRolesResp, error) {
	l := logic.NewGetStaffRolesLogic(ctx, s.svcCtx)
	return l.GetStaffRoles(in)
}

// 获取角色菜单
func (s *AdminServer) GetRoleMenus(ctx context.Context, in *adminRpc.GetRoleMenusReq) (*adminRpc.GetRoleMenusResp, error) {
	l := logic.NewGetRoleMenusLogic(ctx, s.svcCtx)
	return l.GetRoleMenus(in)
}

// ============ 国家管理相关 ============
func (s *AdminServer) CreateCountry(ctx context.Context, in *adminRpc.CreateCountryReq) (*adminRpc.CreateCountryResp, error) {
	l := logic.NewCreateCountryLogic(ctx, s.svcCtx)
	return l.CreateCountry(in)
}

// 获取国家
func (s *AdminServer) GetCountry(ctx context.Context, in *adminRpc.GetCountryReq) (*adminRpc.GetCountryResp, error) {
	l := logic.NewGetCountryLogic(ctx, s.svcCtx)
	return l.GetCountry(in)
}

// 更新国家
func (s *AdminServer) UpdateCountry(ctx context.Context, in *adminRpc.UpdateCountryReq) (*adminRpc.UpdateCountryResp, error) {
	l := logic.NewUpdateCountryLogic(ctx, s.svcCtx)
	return l.UpdateCountry(in)
}

// 删除国家
func (s *AdminServer) DeleteCountry(ctx context.Context, in *adminRpc.DeleteCountryReq) (*adminRpc.DeleteCountryResp, error) {
	l := logic.NewDeleteCountryLogic(ctx, s.svcCtx)
	return l.DeleteCountry(in)
}

// 获取国家列表
func (s *AdminServer) ListCountries(ctx context.Context, in *adminRpc.ListCountriesReq) (*adminRpc.ListCountriesResp, error) {
	l := logic.NewListCountriesLogic(ctx, s.svcCtx)
	return l.ListCountries(in)
}

// 更新国家状态
func (s *AdminServer) UpdateCountryStatus(ctx context.Context, in *adminRpc.UpdateCountryStatusReq) (*adminRpc.UpdateCountryStatusResp, error) {
	l := logic.NewUpdateCountryStatusLogic(ctx, s.svcCtx)
	return l.UpdateCountryStatus(in)
}
