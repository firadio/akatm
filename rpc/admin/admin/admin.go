// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: service.proto

package admin

import (
	"context"

	"akatm/rpc/admin/pb/adminRpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AssignMenuToRoleReq     = adminRpc.AssignMenuToRoleReq
	AssignMenuToRoleResp    = adminRpc.AssignMenuToRoleResp
	AssignRoleToStaffReq    = adminRpc.AssignRoleToStaffReq
	AssignRoleToStaffResp   = adminRpc.AssignRoleToStaffResp
	BaseResp                = adminRpc.BaseResp
	CountryInfo             = adminRpc.CountryInfo
	CreateCountryReq        = adminRpc.CreateCountryReq
	CreateCountryResp       = adminRpc.CreateCountryResp
	CreateMenuReq           = adminRpc.CreateMenuReq
	CreateMenuResp          = adminRpc.CreateMenuResp
	CreatePermissionReq     = adminRpc.CreatePermissionReq
	CreatePermissionResp    = adminRpc.CreatePermissionResp
	CreateRoleReq           = adminRpc.CreateRoleReq
	CreateRoleResp          = adminRpc.CreateRoleResp
	CreateStaffReq          = adminRpc.CreateStaffReq
	CreateStaffResp         = adminRpc.CreateStaffResp
	DeleteCountryReq        = adminRpc.DeleteCountryReq
	DeleteCountryResp       = adminRpc.DeleteCountryResp
	DeleteMenuReq           = adminRpc.DeleteMenuReq
	DeleteMenuResp          = adminRpc.DeleteMenuResp
	DeletePermissionReq     = adminRpc.DeletePermissionReq
	DeletePermissionResp    = adminRpc.DeletePermissionResp
	DeleteRoleReq           = adminRpc.DeleteRoleReq
	DeleteRoleResp          = adminRpc.DeleteRoleResp
	DeleteStaffReq          = adminRpc.DeleteStaffReq
	DeleteStaffResp         = adminRpc.DeleteStaffResp
	GetCountryReq           = adminRpc.GetCountryReq
	GetCountryResp          = adminRpc.GetCountryResp
	GetMenuReq              = adminRpc.GetMenuReq
	GetMenuResp             = adminRpc.GetMenuResp
	GetPermissionReq        = adminRpc.GetPermissionReq
	GetPermissionResp       = adminRpc.GetPermissionResp
	GetRoleMenusReq         = adminRpc.GetRoleMenusReq
	GetRoleMenusResp        = adminRpc.GetRoleMenusResp
	GetRoleReq              = adminRpc.GetRoleReq
	GetRoleResp             = adminRpc.GetRoleResp
	GetStaffReq             = adminRpc.GetStaffReq
	GetStaffResp            = adminRpc.GetStaffResp
	GetStaffRolesReq        = adminRpc.GetStaffRolesReq
	GetStaffRolesResp       = adminRpc.GetStaffRolesResp
	ListCountriesReq        = adminRpc.ListCountriesReq
	ListCountriesResp       = adminRpc.ListCountriesResp
	ListMenusReq            = adminRpc.ListMenusReq
	ListMenusResp           = adminRpc.ListMenusResp
	ListPermissionsReq      = adminRpc.ListPermissionsReq
	ListPermissionsResp     = adminRpc.ListPermissionsResp
	ListRolesReq            = adminRpc.ListRolesReq
	ListRolesResp           = adminRpc.ListRolesResp
	ListStaffsReq           = adminRpc.ListStaffsReq
	ListStaffsResp          = adminRpc.ListStaffsResp
	MenuInfo                = adminRpc.MenuInfo
	PageReq                 = adminRpc.PageReq
	PageResp                = adminRpc.PageResp
	PermissionInfo          = adminRpc.PermissionInfo
	RoleInfo                = adminRpc.RoleInfo
	StaffInfo               = adminRpc.StaffInfo
	UpdateCountryReq        = adminRpc.UpdateCountryReq
	UpdateCountryResp       = adminRpc.UpdateCountryResp
	UpdateCountryStatusReq  = adminRpc.UpdateCountryStatusReq
	UpdateCountryStatusResp = adminRpc.UpdateCountryStatusResp
	UpdateMenuReq           = adminRpc.UpdateMenuReq
	UpdateMenuResp          = adminRpc.UpdateMenuResp
	UpdatePermissionReq     = adminRpc.UpdatePermissionReq
	UpdatePermissionResp    = adminRpc.UpdatePermissionResp
	UpdateRoleReq           = adminRpc.UpdateRoleReq
	UpdateRoleResp          = adminRpc.UpdateRoleResp
	UpdateStaffReq          = adminRpc.UpdateStaffReq
	UpdateStaffResp         = adminRpc.UpdateStaffResp

	Admin interface {
		// ============ 员工管理相关 ============
		CreateStaff(ctx context.Context, in *CreateStaffReq, opts ...grpc.CallOption) (*CreateStaffResp, error)
		// 获取员工
		GetStaff(ctx context.Context, in *GetStaffReq, opts ...grpc.CallOption) (*GetStaffResp, error)
		// 更新员工
		UpdateStaff(ctx context.Context, in *UpdateStaffReq, opts ...grpc.CallOption) (*UpdateStaffResp, error)
		// 删除员工
		DeleteStaff(ctx context.Context, in *DeleteStaffReq, opts ...grpc.CallOption) (*DeleteStaffResp, error)
		// 获取员工列表
		ListStaffs(ctx context.Context, in *ListStaffsReq, opts ...grpc.CallOption) (*ListStaffsResp, error)
		// ============ 角色管理相关 ============
		CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error)
		// 获取角色
		GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*GetRoleResp, error)
		// 更新角色
		UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
		// 删除角色
		DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error)
		// 获取角色列表
		ListRoles(ctx context.Context, in *ListRolesReq, opts ...grpc.CallOption) (*ListRolesResp, error)
		// ============ 菜单管理相关 ============
		CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuResp, error)
		// 获取菜单
		GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*GetMenuResp, error)
		// 更新菜单
		UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error)
		// 删除菜单
		DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuResp, error)
		// 获取菜单列表
		ListMenus(ctx context.Context, in *ListMenusReq, opts ...grpc.CallOption) (*ListMenusResp, error)
		// ============ 权限管理相关 ============
		CreatePermission(ctx context.Context, in *CreatePermissionReq, opts ...grpc.CallOption) (*CreatePermissionResp, error)
		// 获取权限
		GetPermission(ctx context.Context, in *GetPermissionReq, opts ...grpc.CallOption) (*GetPermissionResp, error)
		// 更新权限
		UpdatePermission(ctx context.Context, in *UpdatePermissionReq, opts ...grpc.CallOption) (*UpdatePermissionResp, error)
		// 删除权限
		DeletePermission(ctx context.Context, in *DeletePermissionReq, opts ...grpc.CallOption) (*DeletePermissionResp, error)
		// 获取权限列表
		ListPermissions(ctx context.Context, in *ListPermissionsReq, opts ...grpc.CallOption) (*ListPermissionsResp, error)
		// ============ 权限分配相关 ============
		AssignRoleToStaff(ctx context.Context, in *AssignRoleToStaffReq, opts ...grpc.CallOption) (*AssignRoleToStaffResp, error)
		// 分配菜单给角色
		AssignMenuToRole(ctx context.Context, in *AssignMenuToRoleReq, opts ...grpc.CallOption) (*AssignMenuToRoleResp, error)
		// 获取员工角色
		GetStaffRoles(ctx context.Context, in *GetStaffRolesReq, opts ...grpc.CallOption) (*GetStaffRolesResp, error)
		// 获取角色菜单
		GetRoleMenus(ctx context.Context, in *GetRoleMenusReq, opts ...grpc.CallOption) (*GetRoleMenusResp, error)
		// ============ 国家管理相关 ============
		CreateCountry(ctx context.Context, in *CreateCountryReq, opts ...grpc.CallOption) (*CreateCountryResp, error)
		// 获取国家
		GetCountry(ctx context.Context, in *GetCountryReq, opts ...grpc.CallOption) (*GetCountryResp, error)
		// 更新国家
		UpdateCountry(ctx context.Context, in *UpdateCountryReq, opts ...grpc.CallOption) (*UpdateCountryResp, error)
		// 删除国家
		DeleteCountry(ctx context.Context, in *DeleteCountryReq, opts ...grpc.CallOption) (*DeleteCountryResp, error)
		// 获取国家列表
		ListCountries(ctx context.Context, in *ListCountriesReq, opts ...grpc.CallOption) (*ListCountriesResp, error)
		// 更新国家状态
		UpdateCountryStatus(ctx context.Context, in *UpdateCountryStatusReq, opts ...grpc.CallOption) (*UpdateCountryStatusResp, error)
	}

	defaultAdmin struct {
		cli zrpc.Client
	}
)

func NewAdmin(cli zrpc.Client) Admin {
	return &defaultAdmin{
		cli: cli,
	}
}

// ============ 员工管理相关 ============
func (m *defaultAdmin) CreateStaff(ctx context.Context, in *CreateStaffReq, opts ...grpc.CallOption) (*CreateStaffResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.CreateStaff(ctx, in, opts...)
}

// 获取员工
func (m *defaultAdmin) GetStaff(ctx context.Context, in *GetStaffReq, opts ...grpc.CallOption) (*GetStaffResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.GetStaff(ctx, in, opts...)
}

// 更新员工
func (m *defaultAdmin) UpdateStaff(ctx context.Context, in *UpdateStaffReq, opts ...grpc.CallOption) (*UpdateStaffResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.UpdateStaff(ctx, in, opts...)
}

// 删除员工
func (m *defaultAdmin) DeleteStaff(ctx context.Context, in *DeleteStaffReq, opts ...grpc.CallOption) (*DeleteStaffResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.DeleteStaff(ctx, in, opts...)
}

// 获取员工列表
func (m *defaultAdmin) ListStaffs(ctx context.Context, in *ListStaffsReq, opts ...grpc.CallOption) (*ListStaffsResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.ListStaffs(ctx, in, opts...)
}

// ============ 角色管理相关 ============
func (m *defaultAdmin) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.CreateRole(ctx, in, opts...)
}

// 获取角色
func (m *defaultAdmin) GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*GetRoleResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.GetRole(ctx, in, opts...)
}

// 更新角色
func (m *defaultAdmin) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.UpdateRole(ctx, in, opts...)
}

// 删除角色
func (m *defaultAdmin) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.DeleteRole(ctx, in, opts...)
}

// 获取角色列表
func (m *defaultAdmin) ListRoles(ctx context.Context, in *ListRolesReq, opts ...grpc.CallOption) (*ListRolesResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.ListRoles(ctx, in, opts...)
}

// ============ 菜单管理相关 ============
func (m *defaultAdmin) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.CreateMenu(ctx, in, opts...)
}

// 获取菜单
func (m *defaultAdmin) GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*GetMenuResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.GetMenu(ctx, in, opts...)
}

// 更新菜单
func (m *defaultAdmin) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.UpdateMenu(ctx, in, opts...)
}

// 删除菜单
func (m *defaultAdmin) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.DeleteMenu(ctx, in, opts...)
}

// 获取菜单列表
func (m *defaultAdmin) ListMenus(ctx context.Context, in *ListMenusReq, opts ...grpc.CallOption) (*ListMenusResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.ListMenus(ctx, in, opts...)
}

// ============ 权限管理相关 ============
func (m *defaultAdmin) CreatePermission(ctx context.Context, in *CreatePermissionReq, opts ...grpc.CallOption) (*CreatePermissionResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.CreatePermission(ctx, in, opts...)
}

// 获取权限
func (m *defaultAdmin) GetPermission(ctx context.Context, in *GetPermissionReq, opts ...grpc.CallOption) (*GetPermissionResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.GetPermission(ctx, in, opts...)
}

// 更新权限
func (m *defaultAdmin) UpdatePermission(ctx context.Context, in *UpdatePermissionReq, opts ...grpc.CallOption) (*UpdatePermissionResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.UpdatePermission(ctx, in, opts...)
}

// 删除权限
func (m *defaultAdmin) DeletePermission(ctx context.Context, in *DeletePermissionReq, opts ...grpc.CallOption) (*DeletePermissionResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.DeletePermission(ctx, in, opts...)
}

// 获取权限列表
func (m *defaultAdmin) ListPermissions(ctx context.Context, in *ListPermissionsReq, opts ...grpc.CallOption) (*ListPermissionsResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.ListPermissions(ctx, in, opts...)
}

// ============ 权限分配相关 ============
func (m *defaultAdmin) AssignRoleToStaff(ctx context.Context, in *AssignRoleToStaffReq, opts ...grpc.CallOption) (*AssignRoleToStaffResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.AssignRoleToStaff(ctx, in, opts...)
}

// 分配菜单给角色
func (m *defaultAdmin) AssignMenuToRole(ctx context.Context, in *AssignMenuToRoleReq, opts ...grpc.CallOption) (*AssignMenuToRoleResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.AssignMenuToRole(ctx, in, opts...)
}

// 获取员工角色
func (m *defaultAdmin) GetStaffRoles(ctx context.Context, in *GetStaffRolesReq, opts ...grpc.CallOption) (*GetStaffRolesResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.GetStaffRoles(ctx, in, opts...)
}

// 获取角色菜单
func (m *defaultAdmin) GetRoleMenus(ctx context.Context, in *GetRoleMenusReq, opts ...grpc.CallOption) (*GetRoleMenusResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.GetRoleMenus(ctx, in, opts...)
}

// ============ 国家管理相关 ============
func (m *defaultAdmin) CreateCountry(ctx context.Context, in *CreateCountryReq, opts ...grpc.CallOption) (*CreateCountryResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.CreateCountry(ctx, in, opts...)
}

// 获取国家
func (m *defaultAdmin) GetCountry(ctx context.Context, in *GetCountryReq, opts ...grpc.CallOption) (*GetCountryResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.GetCountry(ctx, in, opts...)
}

// 更新国家
func (m *defaultAdmin) UpdateCountry(ctx context.Context, in *UpdateCountryReq, opts ...grpc.CallOption) (*UpdateCountryResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.UpdateCountry(ctx, in, opts...)
}

// 删除国家
func (m *defaultAdmin) DeleteCountry(ctx context.Context, in *DeleteCountryReq, opts ...grpc.CallOption) (*DeleteCountryResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.DeleteCountry(ctx, in, opts...)
}

// 获取国家列表
func (m *defaultAdmin) ListCountries(ctx context.Context, in *ListCountriesReq, opts ...grpc.CallOption) (*ListCountriesResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.ListCountries(ctx, in, opts...)
}

// 更新国家状态
func (m *defaultAdmin) UpdateCountryStatus(ctx context.Context, in *UpdateCountryStatusReq, opts ...grpc.CallOption) (*UpdateCountryStatusResp, error) {
	client := adminRpc.NewAdminClient(m.cli.Conn())
	return client.UpdateCountryStatus(ctx, in, opts...)
}
