// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.17.3
// source: rpc/mail/proto/service.proto

package emailRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mail_SendEmail_FullMethodName            = "/mail.Mail/SendEmail"
	Mail_SendCode_FullMethodName             = "/mail.Mail/SendCode"
	Mail_VerifyCode_FullMethodName           = "/mail.Mail/VerifyCode"
	Mail_CreateEmailTemplate_FullMethodName  = "/mail.Mail/CreateEmailTemplate"
	Mail_GetEmailTemplate_FullMethodName     = "/mail.Mail/GetEmailTemplate"
	Mail_UpdateEmailTemplate_FullMethodName  = "/mail.Mail/UpdateEmailTemplate"
	Mail_DeleteEmailTemplate_FullMethodName  = "/mail.Mail/DeleteEmailTemplate"
	Mail_ListEmailTemplates_FullMethodName   = "/mail.Mail/ListEmailTemplates"
	Mail_GetEmailSendRecord_FullMethodName   = "/mail.Mail/GetEmailSendRecord"
	Mail_ListEmailSendRecords_FullMethodName = "/mail.Mail/ListEmailSendRecords"
	Mail_ResendEmail_FullMethodName          = "/mail.Mail/ResendEmail"
	Mail_GetEmailSendStats_FullMethodName    = "/mail.Mail/GetEmailSendStats"
	Mail_GetCodeSendStats_FullMethodName     = "/mail.Mail/GetCodeSendStats"
)

// MailClient is the client API for Mail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ============ 邮件服务 ============
type MailClient interface {
	// ============ 邮件发送相关 ============
	// 发送邮件
	SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*SendEmailResp, error)
	// 发送验证码邮件
	SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResp, error)
	// 验证验证码
	VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeResp, error)
	// ============ 邮件模板管理相关 ============
	// 创建邮件模板
	CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateReq, opts ...grpc.CallOption) (*CreateEmailTemplateResp, error)
	// 获取邮件模板
	GetEmailTemplate(ctx context.Context, in *GetEmailTemplateReq, opts ...grpc.CallOption) (*GetEmailTemplateResp, error)
	// 更新邮件模板
	UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateReq, opts ...grpc.CallOption) (*UpdateEmailTemplateResp, error)
	// 删除邮件模板
	DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateReq, opts ...grpc.CallOption) (*DeleteEmailTemplateResp, error)
	// 获取邮件模板列表
	ListEmailTemplates(ctx context.Context, in *ListEmailTemplatesReq, opts ...grpc.CallOption) (*ListEmailTemplatesResp, error)
	// ============ 邮件发送记录相关 ============
	// 获取邮件发送记录
	GetEmailSendRecord(ctx context.Context, in *GetEmailSendRecordReq, opts ...grpc.CallOption) (*GetEmailSendRecordResp, error)
	// 获取邮件发送记录列表
	ListEmailSendRecords(ctx context.Context, in *ListEmailSendRecordsReq, opts ...grpc.CallOption) (*ListEmailSendRecordsResp, error)
	// 重发邮件
	ResendEmail(ctx context.Context, in *ResendEmailReq, opts ...grpc.CallOption) (*ResendEmailResp, error)
	// ============ 邮件统计相关 ============
	// 获取邮件发送统计
	GetEmailSendStats(ctx context.Context, in *GetEmailSendStatsReq, opts ...grpc.CallOption) (*GetEmailSendStatsResp, error)
	// 获取验证码发送统计
	GetCodeSendStats(ctx context.Context, in *GetCodeSendStatsReq, opts ...grpc.CallOption) (*GetCodeSendStatsResp, error)
}

type mailClient struct {
	cc grpc.ClientConnInterface
}

func NewMailClient(cc grpc.ClientConnInterface) MailClient {
	return &mailClient{cc}
}

func (c *mailClient) SendEmail(ctx context.Context, in *SendEmailReq, opts ...grpc.CallOption) (*SendEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEmailResp)
	err := c.cc.Invoke(ctx, Mail_SendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) SendCode(ctx context.Context, in *SendCodeReq, opts ...grpc.CallOption) (*SendCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCodeResp)
	err := c.cc.Invoke(ctx, Mail_SendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyCodeResp)
	err := c.cc.Invoke(ctx, Mail_VerifyCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) CreateEmailTemplate(ctx context.Context, in *CreateEmailTemplateReq, opts ...grpc.CallOption) (*CreateEmailTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEmailTemplateResp)
	err := c.cc.Invoke(ctx, Mail_CreateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) GetEmailTemplate(ctx context.Context, in *GetEmailTemplateReq, opts ...grpc.CallOption) (*GetEmailTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailTemplateResp)
	err := c.cc.Invoke(ctx, Mail_GetEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) UpdateEmailTemplate(ctx context.Context, in *UpdateEmailTemplateReq, opts ...grpc.CallOption) (*UpdateEmailTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEmailTemplateResp)
	err := c.cc.Invoke(ctx, Mail_UpdateEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) DeleteEmailTemplate(ctx context.Context, in *DeleteEmailTemplateReq, opts ...grpc.CallOption) (*DeleteEmailTemplateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEmailTemplateResp)
	err := c.cc.Invoke(ctx, Mail_DeleteEmailTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) ListEmailTemplates(ctx context.Context, in *ListEmailTemplatesReq, opts ...grpc.CallOption) (*ListEmailTemplatesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailTemplatesResp)
	err := c.cc.Invoke(ctx, Mail_ListEmailTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) GetEmailSendRecord(ctx context.Context, in *GetEmailSendRecordReq, opts ...grpc.CallOption) (*GetEmailSendRecordResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailSendRecordResp)
	err := c.cc.Invoke(ctx, Mail_GetEmailSendRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) ListEmailSendRecords(ctx context.Context, in *ListEmailSendRecordsReq, opts ...grpc.CallOption) (*ListEmailSendRecordsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailSendRecordsResp)
	err := c.cc.Invoke(ctx, Mail_ListEmailSendRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) ResendEmail(ctx context.Context, in *ResendEmailReq, opts ...grpc.CallOption) (*ResendEmailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResendEmailResp)
	err := c.cc.Invoke(ctx, Mail_ResendEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) GetEmailSendStats(ctx context.Context, in *GetEmailSendStatsReq, opts ...grpc.CallOption) (*GetEmailSendStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailSendStatsResp)
	err := c.cc.Invoke(ctx, Mail_GetEmailSendStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailClient) GetCodeSendStats(ctx context.Context, in *GetCodeSendStatsReq, opts ...grpc.CallOption) (*GetCodeSendStatsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCodeSendStatsResp)
	err := c.cc.Invoke(ctx, Mail_GetCodeSendStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailServer is the server API for Mail service.
// All implementations must embed UnimplementedMailServer
// for forward compatibility.
//
// ============ 邮件服务 ============
type MailServer interface {
	// ============ 邮件发送相关 ============
	// 发送邮件
	SendEmail(context.Context, *SendEmailReq) (*SendEmailResp, error)
	// 发送验证码邮件
	SendCode(context.Context, *SendCodeReq) (*SendCodeResp, error)
	// 验证验证码
	VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeResp, error)
	// ============ 邮件模板管理相关 ============
	// 创建邮件模板
	CreateEmailTemplate(context.Context, *CreateEmailTemplateReq) (*CreateEmailTemplateResp, error)
	// 获取邮件模板
	GetEmailTemplate(context.Context, *GetEmailTemplateReq) (*GetEmailTemplateResp, error)
	// 更新邮件模板
	UpdateEmailTemplate(context.Context, *UpdateEmailTemplateReq) (*UpdateEmailTemplateResp, error)
	// 删除邮件模板
	DeleteEmailTemplate(context.Context, *DeleteEmailTemplateReq) (*DeleteEmailTemplateResp, error)
	// 获取邮件模板列表
	ListEmailTemplates(context.Context, *ListEmailTemplatesReq) (*ListEmailTemplatesResp, error)
	// ============ 邮件发送记录相关 ============
	// 获取邮件发送记录
	GetEmailSendRecord(context.Context, *GetEmailSendRecordReq) (*GetEmailSendRecordResp, error)
	// 获取邮件发送记录列表
	ListEmailSendRecords(context.Context, *ListEmailSendRecordsReq) (*ListEmailSendRecordsResp, error)
	// 重发邮件
	ResendEmail(context.Context, *ResendEmailReq) (*ResendEmailResp, error)
	// ============ 邮件统计相关 ============
	// 获取邮件发送统计
	GetEmailSendStats(context.Context, *GetEmailSendStatsReq) (*GetEmailSendStatsResp, error)
	// 获取验证码发送统计
	GetCodeSendStats(context.Context, *GetCodeSendStatsReq) (*GetCodeSendStatsResp, error)
	mustEmbedUnimplementedMailServer()
}

// UnimplementedMailServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMailServer struct{}

func (UnimplementedMailServer) SendEmail(context.Context, *SendEmailReq) (*SendEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedMailServer) SendCode(context.Context, *SendCodeReq) (*SendCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedMailServer) VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (UnimplementedMailServer) CreateEmailTemplate(context.Context, *CreateEmailTemplateReq) (*CreateEmailTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailTemplate not implemented")
}
func (UnimplementedMailServer) GetEmailTemplate(context.Context, *GetEmailTemplateReq) (*GetEmailTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailTemplate not implemented")
}
func (UnimplementedMailServer) UpdateEmailTemplate(context.Context, *UpdateEmailTemplateReq) (*UpdateEmailTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailTemplate not implemented")
}
func (UnimplementedMailServer) DeleteEmailTemplate(context.Context, *DeleteEmailTemplateReq) (*DeleteEmailTemplateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailTemplate not implemented")
}
func (UnimplementedMailServer) ListEmailTemplates(context.Context, *ListEmailTemplatesReq) (*ListEmailTemplatesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailTemplates not implemented")
}
func (UnimplementedMailServer) GetEmailSendRecord(context.Context, *GetEmailSendRecordReq) (*GetEmailSendRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailSendRecord not implemented")
}
func (UnimplementedMailServer) ListEmailSendRecords(context.Context, *ListEmailSendRecordsReq) (*ListEmailSendRecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmailSendRecords not implemented")
}
func (UnimplementedMailServer) ResendEmail(context.Context, *ResendEmailReq) (*ResendEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmail not implemented")
}
func (UnimplementedMailServer) GetEmailSendStats(context.Context, *GetEmailSendStatsReq) (*GetEmailSendStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailSendStats not implemented")
}
func (UnimplementedMailServer) GetCodeSendStats(context.Context, *GetCodeSendStatsReq) (*GetCodeSendStatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeSendStats not implemented")
}
func (UnimplementedMailServer) mustEmbedUnimplementedMailServer() {}
func (UnimplementedMailServer) testEmbeddedByValue()              {}

// UnsafeMailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailServer will
// result in compilation errors.
type UnsafeMailServer interface {
	mustEmbedUnimplementedMailServer()
}

func RegisterMailServer(s grpc.ServiceRegistrar, srv MailServer) {
	// If the following call pancis, it indicates UnimplementedMailServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mail_ServiceDesc, srv)
}

func _Mail_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).SendEmail(ctx, req.(*SendEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_SendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).SendCode(ctx, req.(*SendCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_VerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).VerifyCode(ctx, req.(*VerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_CreateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).CreateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_CreateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).CreateEmailTemplate(ctx, req.(*CreateEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_GetEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).GetEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_GetEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).GetEmailTemplate(ctx, req.(*GetEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_UpdateEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).UpdateEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_UpdateEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).UpdateEmailTemplate(ctx, req.(*UpdateEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_DeleteEmailTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).DeleteEmailTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_DeleteEmailTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).DeleteEmailTemplate(ctx, req.(*DeleteEmailTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_ListEmailTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailTemplatesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).ListEmailTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_ListEmailTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).ListEmailTemplates(ctx, req.(*ListEmailTemplatesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_GetEmailSendRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailSendRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).GetEmailSendRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_GetEmailSendRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).GetEmailSendRecord(ctx, req.(*GetEmailSendRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_ListEmailSendRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailSendRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).ListEmailSendRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_ListEmailSendRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).ListEmailSendRecords(ctx, req.(*ListEmailSendRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_ResendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).ResendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_ResendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).ResendEmail(ctx, req.(*ResendEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_GetEmailSendStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailSendStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).GetEmailSendStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_GetEmailSendStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).GetEmailSendStats(ctx, req.(*GetEmailSendStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mail_GetCodeSendStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeSendStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailServer).GetCodeSendStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mail_GetCodeSendStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailServer).GetCodeSendStats(ctx, req.(*GetCodeSendStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mail_ServiceDesc is the grpc.ServiceDesc for Mail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail.Mail",
	HandlerType: (*MailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _Mail_SendEmail_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _Mail_SendCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _Mail_VerifyCode_Handler,
		},
		{
			MethodName: "CreateEmailTemplate",
			Handler:    _Mail_CreateEmailTemplate_Handler,
		},
		{
			MethodName: "GetEmailTemplate",
			Handler:    _Mail_GetEmailTemplate_Handler,
		},
		{
			MethodName: "UpdateEmailTemplate",
			Handler:    _Mail_UpdateEmailTemplate_Handler,
		},
		{
			MethodName: "DeleteEmailTemplate",
			Handler:    _Mail_DeleteEmailTemplate_Handler,
		},
		{
			MethodName: "ListEmailTemplates",
			Handler:    _Mail_ListEmailTemplates_Handler,
		},
		{
			MethodName: "GetEmailSendRecord",
			Handler:    _Mail_GetEmailSendRecord_Handler,
		},
		{
			MethodName: "ListEmailSendRecords",
			Handler:    _Mail_ListEmailSendRecords_Handler,
		},
		{
			MethodName: "ResendEmail",
			Handler:    _Mail_ResendEmail_Handler,
		},
		{
			MethodName: "GetEmailSendStats",
			Handler:    _Mail_GetEmailSendStats_Handler,
		},
		{
			MethodName: "GetCodeSendStats",
			Handler:    _Mail_GetCodeSendStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/mail/proto/service.proto",
}
